name: Development CI

on:
  push:
    branches: [ main-dev, refactor/* ]
  pull_request:
    branches: [ main-dev ]
  workflow_dispatch:

# 公共环境变量（避免重复定义）
env:
  CI: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  HF_ENDPOINT: https://hf-mirror.com

jobs:
  test:
    name: Development Test
    runs-on: self-hosted
    timeout-minutes: 30  # 减少超时时间，开发环境应该更快
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
        clean: true
      timeout-minutes: 8
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: '**/requirements*.txt'
      timeout-minutes: 10
      continue-on-error: false
      
    - name: Verify Python Installation
      run: |
        python --version
        pip --version
        which python
        which pip
      timeout-minutes: 2
      
    - name: Setup Miniconda for quickstart.sh
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        use-mamba: true
        auto-activate-base: false
      timeout-minutes: 10
        
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Cache conda packages
      uses: actions/cache@v4
      with:
        path: |
          ~/conda_pkgs_dir
          ~/.conda/pkgs
          ~/miniconda3/pkgs
        key: ${{ runner.os }}-conda-${{ hashFiles('**/environment*.yml', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-conda-
        
    - name: Setup pip cache and prepare environment
      run: |
        echo "📦 设置pip缓存..."
        mkdir -p ~/.cache/pip
        echo "📦 升级pip (保留缓存)..."
        pip install --upgrade pip
        echo "📊 缓存状态:"
        du -sh ~/.cache/pip 2>/dev/null || echo "缓存目录为空"
        echo "✅ 环境准备完成"
      timeout-minutes: 5
        
    - name: Cache System Dependencies
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/dev-ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
          
    - name: Install System Dependencies
      run: |
        echo "📦 安装系统依赖..."
        # 检查缓存状态
        if [ -f /var/cache/apt/pkgcache.bin ] && [ $(find /var/cache/apt -name "*.bin" -mtime -1 | wc -l) -gt 0 ]; then
          echo "✅ 使用缓存的包列表"
        else
          echo "📥 更新包列表..."
          sudo apt-get update
        fi
        
        # 检查包是否已安装
        missing_packages=""
        for pkg in build-essential cmake pkg-config; do
          if ! dpkg -l | grep -q "^ii.*$pkg "; then
            missing_packages="$missing_packages $pkg"
          fi
        done
        
        if [ -n "$missing_packages" ]; then
          echo "📦 安装缺失的包:$missing_packages"
          sudo apt-get install -y $missing_packages
        else
          echo "✅ 所有系统依赖已安装"
        fi
      timeout-minutes: 10

    - name: Install SAGE (Test Mode)
      shell: bash -l {0}
      env:
        CI: true
        DEBIAN_FRONTEND: noninteractive
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_CACHE_DIR: ~/.cache/pip
        PIP_NO_INPUT: 1
        PIP_DISABLE_PIP_VERSION_CHECK: 1
        SAGE_ENV_NAME: sage
        CONDA_ALWAYS_YES: true
        # 优化pip安装速度
        PIP_USE_FEATURE: fast-deps
        PIP_PROGRESS_BAR: on
        # 并行安装优化
        PIP_PARALLEL_BUILDS: 4
        MAKEFLAGS: "-j4"
      run: |
        echo "🚀 Installing SAGE using quickstart.sh --minimal"
        echo "⏰ 预计安装时间: 10-20分钟（取决于网络和缓存状态）"
        
        conda --version
        mamba --version || echo "mamba not available"
        
        # 显示环境信息
        echo "📊 环境信息:"
        echo "- Python: $(python --version)"
        echo "- Pip cache: $PIP_CACHE_DIR"
        echo "- 网络状态: $(ping -c 1 pypi.org >/dev/null 2>&1 && echo "✅ 可达" || echo "❌ 不可达")"
        echo "- 缓存大小: $(du -sh ~/.cache/pip 2>/dev/null || echo "缓存为空")"
        
        chmod +x ./quickstart.sh
        echo "🎯 开始安装..."
        ./quickstart.sh --minimal
      timeout-minutes: 25
        
    - name: Basic Import Tests
      shell: bash -l {0}
      env:
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_NO_INPUT: 1
        SAGE_ENV_NAME: sage
      run: |
        echo "=== Import Tests ==="
        # 激活conda环境进行测试
        conda activate $SAGE_ENV_NAME
        python -c "import sage; print('✅ SAGE core import successful, version:', sage.__version__)"
        python -c "import sage.common; print('✅ sage.common import successful')"
        python -c "import sage.kernel; print('✅ sage.kernel import successful')"
        python -c "import sage.libs; print('✅ sage.libs import successful')"
        python -c "import sage.middleware; print('✅ sage.middleware import successful')"
        echo "=== CLI Test ==="
        # 注意：SAGE使用Typer框架，命令结构为 "sage <command>"，不是传统的 "sage --option"
        sage --help > /dev/null && echo "✅ SAGE CLI help working"
        sage version && echo "✅ SAGE version command working (使用 'sage version' 不是 'sage --version')"

    - name: Extended Tests
      shell: bash -l {0}
      env:
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_NO_INPUT: 1
        SAGE_ENV_NAME: sage
      run: |
        echo "=== 基础模块导入测试 ==="
        # 激活conda环境进行测试
        conda activate $SAGE_ENV_NAME
        
        # 测试基础导入
        python -c "import sage.common; print('✅ sage.common 导入成功')" || echo "❌ sage.common 导入失败"
        python -c "import sage.common.utils; print('✅ sage.common.utils 导入成功')" || echo "❌ sage.common.utils 导入失败"
        
        # 测试可用的功能模块
        echo "=== 功能模块测试 ==="
        python -c "from sage.common.utils.logging.custom_logger import CustomLogger;  print('✅ Logger working') "
        python -c "import sage.common.utils.system; print('✅ System utils working')" || echo "ℹ️ System utils module structure different"
        
        # 测试其他已安装的包
        python -c "import sage.kernel; print('✅ sage.kernel 可用')" || echo "ℹ️ sage.kernel 不可用"
        python -c "import sage.middleware; print('✅ sage.middleware 可用')" || echo "ℹ️ sage.middleware 不可用"
        python -c "import sage.libs; print('✅ sage.libs 可用')" || echo "ℹ️ sage.libs 不可用"
        
    - name: Full System Test
      shell: bash -l {0}
      env:
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_NO_INPUT: 1
        SAGE_ENV_NAME: sage
      run: |
        echo "=== Full Import Test ==="
        # 激活conda环境进行测试
        conda activate $SAGE_ENV_NAME
        python -c "
        import sys
        print('Python executable:', sys.executable)
        print('Python version:', sys.version)
        
        # 测试完整导入
        try:
            import sage
            print('✅ sage:', sage.__version__)
            
            # 导入各个子模块（使用容错机制）
            modules_status = []
            for module_name in ['common', 'kernel', 'libs', 'middleware']:
                try:
                    module = __import__(f'sage.{module_name}', fromlist=[module_name])
                    modules_status.append(f'✅ sage.{module_name}')
                except ImportError as e:
                    modules_status.append(f'⚠️  sage.{module_name} (未安装或不可用)')
            
            print('模块状态:', ', '.join(modules_status))
            
            # 测试CLI工具 - SAGE使用Typer框架，命令结构不同
            import subprocess
            
            # 先测试基本的help命令
            help_result = subprocess.run(['sage', '--help'], capture_output=True, text=True)
            if help_result.returncode != 0:
                print('❌ SAGE CLI not installed or not working')
                print('Error:', help_result.stderr)
            else:
                print('✅ SAGE CLI installed and working')
                
                # 测试version子命令（注意：不是--version选项）
                version_result = subprocess.run(['sage', 'version'], capture_output=True, text=True)
                if version_result.returncode == 0:
                    print('✅ SAGE version command successful:', version_result.stdout.strip())
                else:
                    print('⚠️  SAGE version command failed:')
                    print('STDOUT:', version_result.stdout)
                    print('STDERR:', version_result.stderr)
                    
                    # 尝试其他版本查询方式
                    print('ℹ️  注意: SAGE使用 "sage version" 命令，不是 "sage --version" 选项')
            
        except Exception as e:
            print('❌ Import test failed:', str(e))
            sys.exit(1)
        "
