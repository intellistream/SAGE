name: "Development CI"

on:
  push:
    branches: [main-dev]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'README*'
  pull_request:
    branches: [main-dev]
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'README*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true
  SAGE_VERBOSE_BUILD: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
  HF_ENDPOINT: https://hf-mirror.com
  # 移除手动CACHE_VERSION，让缓存完全基于代码内容自动失效

jobs:
  quick-check:
    name: SAGE Self-Check
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Create .env File from Secrets
        run: |
          echo "🔐 从 GitHub Secrets 创建 .env 文件..."
          cat > .env << EOF
          # CI Environment Configuration (Auto-generated from GitHub Secrets)
          # This file is created during CI/CD and should not be committed to git
          
          # ==================================================
          # LLM Service API Keys
          # ==================================================
          
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
          OPENAI_MODEL_NAME=qwen-turbo-2025-02-11
          
          SILICONCLOUD_API_KEY=${{ secrets.SILICONCLOUD_API_KEY }}
          JINA_API_KEY=${{ secrets.JINA_API_KEY }}
          ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY }}
          
          # vLLM configuration for local/self-hosted services
          VLLM_API_KEY=${{ secrets.VLLM_API_KEY }}
          VLLM_BASE_URL=http://localhost:8000/v1
          VLLM_MODEL_NAME=meta-llama/Llama-2-13b-chat-hf
          
          # ==================================================
          # GitHub Token for Repository Access
          # ==================================================
          
          GIT_TOKEN=${{ secrets.GIT_TOKEN }}
          
          
          
          # ==================================================
          # Hugging Face Configuration
          # ==================================================
          
          HF_TOKEN=${{ secrets.HF_TOKEN }}
          HF_ENDPOINT=https://hf-mirror.com
          
          # ==================================================
          # CI/CD Settings
          # ==================================================
          
          SAGE_DEBUG=false
          SAGE_SKIP_CPP_EXTENSIONS=false
          SAGE_LOG_LEVEL=INFO
          SAGE_TEST_MODE=true
          SAGE_EXAMPLES_MODE=test
          EOF
          
          echo "✅ .env 文件创建完成"
          echo "📋 验证 .env 文件内容（隐藏敏感信息）:"
          cat .env | grep -E "^[A-Z_]+=.+" | sed 's/=.*/=***/' || echo "⚠️ .env 文件为空或格式不正确"

      - name: Initialize Submodules
        run: |
          echo "🔁 初始化子模块（C++扩展依赖）..."
          git submodule update --init --recursive
          echo "✅ 子模块初始化完成"

      - name: Install SAGE
        run: |
          echo "� 安装SAGE（使用quickstart.sh --dev）..."
          chmod +x ./quickstart.sh
          ./quickstart.sh --dev --pip --yes
          echo "✅ SAGE安装完成"

      - name: Run Basic Tests
        run: |
          echo "🧪 运行基础测试..."
          python -c "import sage; import sage.common; print('✅ 基础导入测试通过')"
          
          if command -v sage >/dev/null 2>&1; then
            sage --help > /dev/null && echo "✅ CLI测试通过"
          fi

      - name: Run SAGE Unit Tests
        run: |
          echo "🧪 运行SAGE单元测试..."
          # 安装测试依赖（包括 pytest-xdist 用于并行测试）
          pip install pytest pytest-cov pytest-xdist
          
          # 运行各个包的测试（按依赖顺序，跳过没有测试的包）
          # 使用 -n auto 启用并行测试，使用 -m "not slow" 跳过慢速测试
          # 排除 pypi 测试（这些是手动验证用的）
          test_packages=("sage-common" "sage-kernel" "sage-tools" "sage-libs" "sage-middleware" "sage-apps" "sage-benchmark" "sage-studio")
          failed_tests=0
          failed_packages=()

          for package in "${test_packages[@]}"; do
            if [ -d "packages/$package/tests" ]; then
              echo "🧪 测试 $package..."
              if python -m pytest "packages/$package/tests/" \
                  -v -n auto -m "not slow" \
                  --ignore="packages/$package/tests/pypi" \
                  --tb=short --maxfail=3; then
                echo "✅ $package 测试通过"
              else
                echo "❌ $package 测试失败"
                failed_tests=$((failed_tests + 1))
                failed_packages+=("$package")
              fi
            else
              echo "⚠️ $package 没有tests目录，跳过"
            fi
          done

          # 报告测试结果并在有失败时终止（返回非零退出码）
          if [ $failed_tests -eq 0 ]; then
            echo "🎉 所有测试通过！"
          else
            echo "❌ $failed_tests 个包的测试失败： ${failed_packages[*]}"
            echo "为防止错误被忽略，CI 将以失败状态退出。"
            exit 1
          fi
        timeout-minutes: 20

  examples-test:
    name: Examples Test
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Create .env File from Secrets
        run: |
          echo "🔐 从 GitHub Secrets 创建 .env 文件..."
          cat > .env << EOF
          # CI Environment Configuration (Auto-generated from GitHub Secrets)
          # This file is created during CI/CD and should not be committed to git
          
          # ==================================================
          # LLM Service API Keys
          # ==================================================
          
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
          OPENAI_MODEL_NAME=qwen-turbo-2025-02-11
          
          SILICONCLOUD_API_KEY=${{ secrets.SILICONCLOUD_API_KEY }}
          JINA_API_KEY=${{ secrets.JINA_API_KEY }}
          ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY }}
          
          # vLLM configuration for local/self-hosted services
          VLLM_API_KEY=${{ secrets.VLLM_API_KEY }}
          VLLM_BASE_URL=http://localhost:8000/v1
          VLLM_MODEL_NAME=meta-llama/Llama-2-13b-chat-hf
          
          # ==================================================
          # GitHub Token for Repository Access
          # ==================================================
          
          GIT_TOKEN=${{ secrets.GIT_TOKEN }}
          
          
          
          # ==================================================
          # Hugging Face Configuration
          # ==================================================
          
          HF_TOKEN=${{ secrets.HF_TOKEN }}
          HF_ENDPOINT=https://hf-mirror.com
          
          # ==================================================
          # CI/CD Settings
          # ==================================================
          
          SAGE_DEBUG=false
          SAGE_SKIP_CPP_EXTENSIONS=false
          SAGE_LOG_LEVEL=INFO
          SAGE_TEST_MODE=true
          SAGE_EXAMPLES_MODE=test
          EOF
          
          echo "✅ .env 文件创建完成"
          echo "📋 验证 .env 文件内容（隐藏敏感信息）:"
          cat .env | grep -E "^[A-Z_]+=.+" | sed 's/=.*/=***/' || echo "⚠️ .env 文件为空或格式不正确"

      - name: Initialize Submodules
        run: |
          echo "🔁 初始化子模块（C++扩展依赖）..."
          git submodule update --init --recursive
          echo "✅ 子模块初始化完成"

      - name: Install SAGE
        run: |
          echo "� 安装SAGE（使用quickstart.sh --dev）..."
          chmod +x ./quickstart.sh
          ./quickstart.sh --dev --pip --yes
          echo "✅ SAGE安装完成"

      - name: Run Examples Tests
        run: |
          echo "🌟 运行Examples测试..."
          chmod +x ./tools/tests/run_examples_tests.sh
          ./tools/tests/run_examples_tests.sh --timeout 300
  
  deployment-ready:
    name: Deployment Readiness Check
    # GitHub 免费 Runner 配置（磁盘空间约 14GB，可能不足）
    runs-on: ubuntu-latest
    
    # 如果遇到磁盘空间不足，可以切换到 self-hosted runner:
    # runs-on: self-hosted
    
    needs: [quick-check, examples-test]
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/main-dev')) ||
      (github.event_name == 'pull_request' && github.base_ref == 'main-dev')
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          clean: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Free up disk space (Aggressive)
        run: |
          echo "🧹 激进清理磁盘空间（Deployment Readiness 需要在新虚拟环境安装所有依赖）..."
          echo "📊 清理前磁盘使用情况："
          df -h
          
          # 删除不需要的软件和工具链
          echo "🗑️ 删除 .NET、Android、GHC 等大型工具链..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          
          # 删除更多不需要的包
          echo "🗑️ 删除不需要的系统包..."
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/local/lib/node_modules
          
          # 清理 APT 缓存
          echo "🗑️ 清理 APT 缓存..."
          sudo apt-get clean
          sudo apt-get autoclean
          
          # 清理 Docker 镜像和容器
          echo "🗑️ 清理 Docker..."
          docker system prune -af --volumes 2>/dev/null || true
          
          # 清理 pip 缓存
          echo "🗑️ 清理 pip 缓存..."
          pip cache purge || true
          
          echo "✅ 清理完成，当前磁盘使用情况："
          df -h
          echo "📊 根分区剩余空间："
          df -h / | tail -1 | awk '{print "可用: " $4 " (" $5 " 已使用)"}'

      - name: Create .env File from Secrets
        run: |
          echo "🔐 从 GitHub Secrets 创建 .env 文件..."
          cat > .env << EOF
          # CI Environment Configuration (Auto-generated from GitHub Secrets)
          # This file is created during CI/CD and should not be committed to git
          
          # ==================================================
          # LLM Service API Keys
          # ==================================================
          
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
          OPENAI_MODEL_NAME=qwen-turbo-2025-02-11
          
          SILICONCLOUD_API_KEY=${{ secrets.SILICONCLOUD_API_KEY }}
          JINA_API_KEY=${{ secrets.JINA_API_KEY }}
          ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY }}
          
          # vLLM configuration for local/self-hosted services
          VLLM_API_KEY=${{ secrets.VLLM_API_KEY }}
          VLLM_BASE_URL=http://localhost:8000/v1
          VLLM_MODEL_NAME=meta-llama/Llama-2-13b-chat-hf
          
          # ==================================================
          # GitHub Token for Repository Access
          # ==================================================
          
          GIT_TOKEN=${{ secrets.GIT_TOKEN }}
          
          
          
          # ==================================================
          # Hugging Face Configuration
          # ==================================================
          
          HF_TOKEN=${{ secrets.HF_TOKEN }}
          HF_ENDPOINT=https://hf-mirror.com
          
          # ==================================================
          # CI/CD Settings
          # ==================================================
          
          SAGE_DEBUG=false
          SAGE_SKIP_CPP_EXTENSIONS=false
          SAGE_LOG_LEVEL=INFO
          SAGE_TEST_MODE=true
          SAGE_EXAMPLES_MODE=test
          EOF
          
          echo "✅ .env 文件创建完成"
          echo "📋 验证 .env 文件内容（隐藏敏感信息）:"
          cat .env | grep -E "^[A-Z_]+=.+" | sed 's/=.*/=***/' || echo "⚠️ .env 文件为空或格式不正确"

      - name: Initialize Submodules
        run: |
          echo "🔁 初始化子模块（C++扩展依赖）..."
          git submodule update --init --recursive
          echo "✅ 子模块初始化完成"

      - name: Install SAGE
        run: |
          echo "� 安装SAGE（使用quickstart.sh --dev）..."
          chmod +x ./quickstart.sh
          ./quickstart.sh --dev --pip --yes
          echo "✅ SAGE安装完成"

      - name: Validate PyPI Release Readiness
        run: |
          echo "🔍 验证SAGE代码的PyPI发布准备状态..."
          if sage dev pypi validate; then
            echo "✅ PyPI发布准备验证完成"
          else
            echo "❌ PyPI发布准备验证失败"
            exit 1
          fi

      - name: Check Package Build Status
        run: |
          echo "🏗️ 检查SAGE包的构建状态..."
          if sage dev pypi check; then
            echo "✅ 包构建状态检查完成"
          else
            echo "❌ 包构建状态检查失败"
            exit 1
          fi

      - name: Build SAGE Packages
        run: |
          echo "📦 构建SAGE wheel包..."
          echo "ℹ️  已通过 'sage dev pypi validate' 步骤构建所有包"
          
          # 显示所有构建的文件
          echo "📋 所有构建的包文件:"
          find packages/*/dist/ -name "*.whl" | sort
          
          # 验证所有必需的包都已构建
          echo ""
          echo "🔍 验证必需的包:"
          for pkg in sage-common sage-kernel sage-middleware sage-libs sage-tools sage-apps sage-benchmark sage-studio sage; do
            if ls packages/${pkg}/dist/*.whl 1> /dev/null 2>&1; then
              echo "  ✅ ${pkg}: $(ls packages/${pkg}/dist/*.whl | xargs -n1 basename)"
            else
              echo "  ❌ ${pkg}: 未找到wheel文件"
              exit 1
            fi
          done
          echo "✅ 所有包构建完成"

      - name: Test Package Installation
        run: |
          echo "🧪 测试包安装..."
          
          # 创建临时环境测试安装
          python -m venv /tmp/test_env
          source /tmp/test_env/bin/activate
          
          # 查找构建的wheel文件
          echo "🔍 查找构建的wheel文件..."
          find . -name "*.whl" -type f | head -10
          
          # 创建本地包索引目录
          echo "📦 创建本地包索引..."
          mkdir -p /tmp/local_packages
          find packages/*/dist -name "*.whl" -exec cp {} /tmp/local_packages/ \;
          ls -lh /tmp/local_packages/
          
          # 使用本地包索引安装核心包进行测试
          echo "📦 测试安装核心包（使用本地依赖）..."
          if ls packages/sage/dist/isage-*.whl 1> /dev/null 2>&1; then
            # 使用--find-links从本地目录优先查找SAGE包，其他依赖从PyPI下载
            pip install --find-links=/tmp/local_packages packages/sage/dist/isage-*.whl
            python -c "import sage; print('✅ sage核心包安装成功')"
          else
            echo "⚠️ 未找到核心包wheel文件"
          fi
          
          # 测试工具包安装
          if ls packages/sage-tools/dist/isage_tools-*.whl 1> /dev/null 2>&1; then
            pip install --find-links=/tmp/local_packages packages/sage-tools/dist/isage_tools-*.whl
            python -c "import sage.tools; print('✅ sage-tools包安装成功')"
          else
            echo "⚠️ 未找到工具包wheel文件"
          fi
          
          deactivate
          echo "✅ 包安装测试完成"

      - name: Deployment Status Summary
        run: |
          echo "🚀 部署就绪检查总结"
          echo "✅ 所有测试通过"
          echo "✅ PyPI发布验证通过"
          echo "✅ 包构建成功"
          echo "✅ 包安装测试通过"
          echo "✅ 主分支推送"
          echo "🎉 SAGE已准备好部署到PyPI"      

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [quick-check, examples-test, deployment-ready]

    steps:
      - name: Summary Report
        run: |
          echo "🏁 开发CI管道完成"
          echo "📊 作业状态:"
          echo "- Quick Check: ${{ needs.quick-check.result }}"
          echo "- Examples: ${{ needs.examples-test.result }}"
          echo "- Deployment Ready: ${{ needs.deployment-ready.result }}"
          
          if [[ "${{ needs.quick-check.result }}" == "success" ]]; then
            echo "✅ 核心功能正常"
          else
            echo "❌ 核心功能存在问题"
          fi
          
          if [[ "${{ needs.deployment-ready.result }}" == "success" ]]; then
            echo "🚀 部署准备完成"
          elif [[ "${{ needs.deployment-ready.result }}" == "skipped" ]]; then
            echo "⏭️ 部署检查已跳过（非主分支推送）"
          else
            echo "❌ 部署准备失败"
          fi