name: Development CI

on:
  push:
    branches: [ main-dev, refactor/* ]
  pull_request:
    branches: [ main-dev ]
  workflow_dispatch:

# 公共环境变量（避免重复定义）
env:
  CI: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  HF_ENDPOINT: https://hf-mirror.com

jobs:
  test:
    name: Development Test
    runs-on: self-hosted
    timeout-minutes: 30  # 减少超时时间，开发环境应该更快
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
        clean: true
      timeout-minutes: 8
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: '**/requirements*.txt'
      timeout-minutes: 10
      continue-on-error: false
      
    - name: Verify Python Installation
      run: |
        python --version
        pip --version
        which python
        which pip
      timeout-minutes: 2
        
    - name: Setup pip and prepare environment
      run: |
        echo "📦 准备Python环境..."
        echo "📦 升级pip..."
        pip install --upgrade pip --no-cache-dir
        echo "📊 环境状态:"
        echo "- Python: $(python --version)"
        echo "- Pip: $(pip --version)" 
        echo "✅ 环境准备完成"
      timeout-minutes: 5
        
    - name: Cache System Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          /tmp/apt-cache
        key: ${{ runner.os }}-system-deps-${{ hashFiles('.github/workflows/dev-ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-system-deps-
          
    - name: Install System Dependencies
      run: |
        echo "📦 安装系统依赖..."
        
        # 创建用户可写的缓存目录
        mkdir -p /tmp/apt-cache
        
        # 更新包列表（优化CI性能）
        echo "📥 更新包列表..."
        sudo apt-get update -qq
        
        # 检查包是否已安装
        missing_packages=""
        for pkg in build-essential cmake pkg-config; do
          if ! dpkg -l | grep -q "^ii.*$pkg "; then
            missing_packages="$missing_packages $pkg"
          fi
        done
        
        if [ -n "$missing_packages" ]; then
          echo "📦 安装缺失的包:$missing_packages"
          sudo apt-get install -y $missing_packages
        else
          echo "✅ 所有系统依赖已安装"
        fi
      timeout-minutes: 10

    - name: Install SAGE (Test Mode)
      env:
        CI: true
        DEBIAN_FRONTEND: noninteractive
        PIP_NO_INPUT: 1
        PIP_DISABLE_PIP_VERSION_CHECK: 1
        # 并行安装优化
        PIP_PARALLEL_BUILDS: 4
        MAKEFLAGS: "-j4"
      run: |
        echo "🚀 CI模式：通过quickstart.sh --minimal --pip安装SAGE"
        echo "ℹ️ 使用pip模式避免conda依赖"
        echo "⏰ 预计安装时间: 5-10分钟"
        
        # 显示环境信息
        echo "📊 环境信息:"
        echo "- Python: $(python --version)"
        echo "- Python路径: $(which python)"
        echo "- Pip版本: $(pip --version)"
        echo "- 网络状态: $(ping -c 1 pypi.org >/dev/null 2>&1 && echo "✅ 可达" || echo "❌ 不可达")"
        
        echo "🎯 开始通过quickstart.sh安装..."
        chmod +x ./quickstart.sh
        ./quickstart.sh --minimal --pip --yes
        
        echo "✅ quickstart.sh安装完成"
      timeout-minutes: 15
        
    - name: Basic Import Tests
      env:
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_NO_INPUT: 1
      run: |
        echo "=== Import Tests ==="
        python -c "import sage; print('✅ SAGE core import successful, version:', sage.__version__)"
        python -c "import sage.common; print('✅ sage.common import successful')"
        python -c "import sage.kernel; print('✅ sage.kernel import successful')"
        python -c "import sage.libs; print('✅ sage.libs import successful')"
        python -c "import sage.middleware; print('✅ sage.middleware import successful')"
        echo "=== CLI Test ==="
        # 注意：SAGE使用Typer框架，命令结构为 "sage <command>"，不是传统的 "sage --option"
        sage --help > /dev/null && echo "✅ SAGE CLI help working"
        sage version && echo "✅ SAGE version command working (使用 'sage version' 不是 'sage --version')"

    - name: Extended Tests
      env:
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_NO_INPUT: 1
      run: |
        echo "=== 基础模块导入测试 ==="
        
        # 测试基础导入
        python -c "import sage.common; print('✅ sage.common 导入成功')" || echo "❌ sage.common 导入失败"
        python -c "import sage.common.utils; print('✅ sage.common.utils 导入成功')" || echo "❌ sage.common.utils 导入失败"
        
        # 测试可用的功能模块
        echo "=== 功能模块测试 ==="
        python -c "from sage.common.utils.logging.custom_logger import CustomLogger;  print('✅ Logger working') "
        python -c "import sage.common.utils.system; print('✅ System utils working')" || echo "ℹ️ System utils module structure different"
        
        # 测试其他已安装的包
        python -c "import sage.kernel; print('✅ sage.kernel 可用')" || echo "ℹ️ sage.kernel 不可用"
        python -c "import sage.middleware; print('✅ sage.middleware 可用')" || echo "ℹ️ sage.middleware 不可用"
        python -c "import sage.libs; print('✅ sage.libs 可用')" || echo "ℹ️ sage.libs 不可用"

    - name: Run Pytest Suite
      env:
        PIP_NO_INPUT: 1
      run: |
        echo "=== Pytest 测试套件 ==="
        
        # 安装 pytest 相关依赖
        pip install pytest pytest-cov pytest-mock pytest-asyncio --no-cache-dir
        
        # 查找并运行可用的测试
        if [ -d "packages/sage-common/tests" ]; then
          echo "🧪 运行 sage-common 测试..."
          python -m pytest packages/sage-common/tests/ -v --tb=short --timeout=60 || echo "⚠️ sage-common 测试有问题"
        fi
        
        if [ -d "tools/tests" ]; then
          echo "🧪 运行工具测试..."
          python -m pytest tools/tests/ -v --tb=short --timeout=60 || echo "⚠️ 工具测试有问题"
        fi
        
        # 运行快速集成测试
        echo "🔗 运行集成测试..."
        cd tools/tests
        if [ -f "test_issues_manager.sh" ]; then
          bash test_issues_manager.sh --quick || echo "⚠️ Issues manager 测试有问题"
        fi
        
        echo "✅ Pytest 测试套件完成"
      timeout-minutes: 10
        
    - name: Full System Test
      env:
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_NO_INPUT: 1
      run: |
        echo "=== Full Import Test ==="
        python -c "
        import sys
        print('Python executable:', sys.executable)
        print('Python version:', sys.version)
        
        # 测试完整导入
        try:
            import sage
            print('✅ sage:', sage.__version__)
            
            # 导入各个子模块（使用容错机制）
            modules_status = []
            for module_name in ['common', 'kernel', 'libs', 'middleware']:
                try:
                    module = __import__(f'sage.{module_name}', fromlist=[module_name])
                    modules_status.append(f'✅ sage.{module_name}')
                except ImportError as e:
                    modules_status.append(f'⚠️  sage.{module_name} (未安装或不可用)')
            
            print('模块状态:', ', '.join(modules_status))
            
            # 测试CLI工具 - SAGE使用Typer框架，命令结构不同
            import subprocess
            
            # 先测试基本的help命令
            help_result = subprocess.run(['sage', '--help'], capture_output=True, text=True)
            if help_result.returncode != 0:
                print('❌ SAGE CLI not installed or not working')
                print('Error:', help_result.stderr)
            else:
                print('✅ SAGE CLI installed and working')
                
                # 测试version子命令（注意：不是--version选项）
                version_result = subprocess.run(['sage', 'version'], capture_output=True, text=True)
                if version_result.returncode == 0:
                    print('✅ SAGE version command successful:', version_result.stdout.strip())
                else:
                    print('⚠️  SAGE version command failed:')
                    print('STDOUT:', version_result.stdout)
                    print('STDERR:', version_result.stderr)
                    
                    # 尝试其他版本查询方式
                    print('ℹ️  注意: SAGE使用 sage version 命令，不是 sage --version 选项')
            
        except Exception as e:
            print('❌ Import test failed:', str(e))
            sys.exit(1)
        "
        
    - name: Run Basic Pytest Suite
      env:
        PIP_NO_INPUT: 1
      run: |
        echo "🧪 Running development pytest suite..."
        
        # 安装测试依赖
        echo "📦 Installing test dependencies..."
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-xdist pytest-timeout || echo "⚠️ Some test dependencies failed to install"
        
        # 运行Issues Manager测试
        echo "🔧 Testing issues manager..."
        cd tools/tests
        if [ -f test_issues_manager.sh ]; then
          bash test_issues_manager.sh --quick || echo "⚠️ Issues manager tests had issues"
          echo "✅ Issues manager tests completed"
        else
          echo "ℹ️ Issues manager test script not found"
        fi
        cd ../..
        
        # 运行快速pytest测试
        echo "🔬 Running quick pytest suite..."
        cd tools/tests
        if [ -f run_tests.py ]; then
          echo "📊 Running unit tests (quick mode)..."
          python run_tests.py --quick --unit --jobs 4 --timeout 60 --summary || echo "ℹ️ Some unit tests didn't pass"
          
          echo "📋 Generating quick report..."
          python run_tests.py --quick --unit --report dev_test_report.txt --summary 2>/dev/null || echo "ℹ️ Report generation skipped"
          
          if [ -f dev_test_report.txt ]; then
            echo "📊 Quick Test Summary:"
            tail -10 dev_test_report.txt
          fi
        else
          echo "ℹ️ Test runner not found, running direct pytest..."
          # 直接运行pytest在packages目录
          cd ../../packages
          for package in sage-common sage-kernel sage-libs sage-middleware; do
            if [ -d "$package/tests" ]; then
              echo "🧪 Testing $package..."
              cd "$package"
              python -m pytest tests/ -v --tb=short -x --timeout=30 2>/dev/null || echo "⚠️ $package tests had issues"
              cd ..
            else
              echo "ℹ️ No tests directory in $package"
            fi
          done
        fi
        
        echo "✅ Development test suite completed"
