name: Development CI

on:
  push:
    branches: [ main-dev, refactor/* ]
  pull_request:
    branches: [ main-dev ]
  workflow_dispatch:

# 公共环境变量（避免重复定义）
env:
  CI: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  HF_ENDPOINT: https://hf-mirror.com

jobs:
  test:
    name: Development Test
    runs-on: self-hosted
    timeout-minutes: 30  # 减少超时时间，开发环境应该更快
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
        clean: true
      timeout-minutes: 8
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: '**/requirements*.txt'
      timeout-minutes: 10
      continue-on-error: false
      
    - name: Verify Python Installation
      run: |
        python --version
        pip --version
        which python
        which pip
      timeout-minutes: 2
      
    - name: Setup Miniconda for quickstart.sh
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        use-mamba: true
        auto-activate-base: false
      timeout-minutes: 10
        
    - name: Clear pip cache and prepare environment
      run: |
        echo "🧹 Clearing pip cache..."
        pip cache purge || echo "No cache to clear"
        echo "📦 Upgrading pip..."
        pip install --upgrade pip --no-cache-dir
        echo "✅ Environment prepared"
      timeout-minutes: 5
        
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config
      timeout-minutes: 10

    - name: Install SAGE (Test Mode)
      shell: bash -l {0}
      env:
        CI: true
        DEBIAN_FRONTEND: noninteractive
        PYTHONNOUSERSITE: 1
        PIP_CACHE_DIR: /tmp/pip-cache
        PIP_NO_INPUT: 1
        PIP_DISABLE_PIP_VERSION_CHECK: 1
      run: |
        echo "Installing SAGE using quickstart.sh --minimal --conda sage-test"
        conda --version
        chmod +x ./quickstart.sh
        ./quickstart.sh --minimal --conda sage-test
      timeout-minutes: 15
        
    - name: Basic Import Tests
      shell: bash -l {0}
      env:
        PYTHONNOUSERSITE: 1
        PIP_NO_INPUT: 1
      run: |
        echo "=== Import Tests ==="
        # 激活conda环境进行测试
        conda activate sage-test
        python -c "import sage; print('✅ SAGE core import successful, version:', sage.__version__)"
        python -c "import sage.common; print('✅ sage.common import successful')"
        python -c "import sage.kernel; print('✅ sage.kernel import successful')"
        python -c "import sage.libs; print('✅ sage.libs import successful')"
        python -c "import sage.middleware; print('✅ sage.middleware import successful')"
        echo "=== CLI Test ==="
        sage --help > /dev/null && echo "✅ SAGE CLI help working"
        sage version && echo "✅ SAGE version command working"

    - name: Extended Tests
      shell: bash -l {0}
      env:
        PYTHONNOUSERSITE: 1
        PIP_NO_INPUT: 1
      run: |
        echo "=== Configuration Test ==="
        # 激活conda环境进行测试
        conda activate sage-test
        python -c "from sage.common.config import SageConfig; print('✅ Config system working')" || echo "❌ Config system failed"
        
        echo "=== Utilities Test ==="
        python -c "from sage.common.utils import get_logger; logger = get_logger('test'); logger.info('Test log'); print('✅ Logger working')" || echo "❌ Logger failed"
        
        echo "=== Kernel Test ==="  
        python -c "from sage.kernel.core import SageKernel; print('✅ Kernel core import successful')" || echo "❌ Kernel core failed"
        
        echo "=== Middleware Test ==="
        python -c "from sage.middleware.core import MiddlewareManager; print('✅ Middleware core import successful')" || echo "❌ Middleware core failed"
        
        echo "=== Library Test ==="
        python -c "from sage.libs.utilities import get_version; print('✅ Libs utilities working')" || echo "❌ Libs utilities failed"
        
    - name: Full System Test
      shell: bash -l {0}
      env:
        PYTHONNOUSERSITE: 1
        PIP_NO_INPUT: 1
      run: |
        echo "=== Full Import Test ==="
        # 激活conda环境进行测试
        conda activate sage-test
        python -c "
        import sys
        print('Python executable:', sys.executable)
        print('Python version:', sys.version)
        
        # 测试完整导入
        try:
            import sage
            print('✅ sage:', sage.__version__)
            
            # 导入各个子模块
            from sage import common, kernel, libs, middleware
            print('✅ All SAGE modules imported successfully')
            
            # 测试CLI工具
            import subprocess
            result = subprocess.run(['sage', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print('✅ CLI version check successful:', result.stdout.strip())
            else:
                print('❌ CLI version check failed:', result.stderr)
            
        except Exception as e:
            print('❌ Import test failed:', str(e))
            sys.exit(1)
        "
