name: Pytest CI

on:
  push:
    branches: [ main, main-dev ]
    paths:
      - 'packages/*/tests/**'
      - 'packages/*/src/**'
      - 'tools/tests/**'
      - '.github/workflows/pytest-ci.yml'
  pull_request:
    branches: [ main, main-dev ]
    paths:
      - 'packages/*/tests/**'
      - 'packages/*/src/**'
      - 'tools/tests/**'
      - '.github/workflows/pytest-ci.yml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'unit'
        type: choice
        options:
          - unit
          - integration
          - performance
          - all
      test_packages:
        description: 'Packages to test (comma-separated, leave empty for all)'
        required: false
        default: ''

env:
  CI: true
  PYTHONPATH: ${{ github.workspace }}/packages/sage-common/src:${{ github.workspace }}/packages/sage-kernel/src:${{ github.workspace }}/packages/sage-libs/src:${{ github.workspace }}/packages/sage-middleware/src
  PYTEST_TIMEOUT: 300

jobs:
  test-discovery:
    name: Discover Tests
    runs-on: self-hosted
    timeout-minutes: 5
    outputs:
      has_tests: ${{ steps.discover.outputs.has_tests }}
      test_packages: ${{ steps.discover.outputs.packages }}
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Discover Test Packages
      id: discover
      run: |
        echo "Discovering test packages..."
        packages_with_tests=""
        has_tests=false
        
        for package in packages/*/; do
          if [ -d "${package}tests" ] || [ -f "${package}run_tests.py" ]; then
            package_name=$(basename "$package")
            packages_with_tests="$packages_with_tests $package_name"
            has_tests=true
            echo "✅ Found tests in: $package_name"
          fi
        done
        
        # Check tools/tests
        if [ -d "tools/tests" ]; then
          packages_with_tests="$packages_with_tests tools"
          has_tests=true
          echo "✅ Found tests in: tools"
        fi
        
        echo "has_tests=$has_tests" >> $GITHUB_OUTPUT
        echo "packages=$packages_with_tests" >> $GITHUB_OUTPUT
        echo "Packages with tests: $packages_with_tests"

  unit-tests:
    name: Unit Tests
    runs-on: self-hosted
    needs: test-discovery
    if: needs.test-discovery.outputs.has_tests == 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install Test Dependencies
      run: |
        echo "📦 Installing test dependencies..."
        pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-xdist pytest-timeout pytest-html
        
        # Install SAGE packages in development mode
        echo "📦 Installing SAGE packages..."
        for package in sage-common sage-kernel sage-libs sage-middleware; do
          if [ -d "packages/$package" ]; then
            echo "Installing $package..."
            pip install -e "packages/$package" --no-deps
          fi
        done
        
        echo "✅ Dependencies installed"
        
    - name: Run Unit Tests
      run: |
        echo "🧪 Running unit tests..."
        cd tools/tests
        
        test_type="${{ github.event.inputs.test_type || 'unit' }}"
        test_packages="${{ github.event.inputs.test_packages }}"
        
        if [ -f run_tests.py ]; then
          echo "📊 Using unified test runner..."
          if [ -n "$test_packages" ]; then
            # 运行指定包
            IFS=',' read -ra ADDR <<< "$test_packages"
            for pkg in "${ADDR[@]}"; do
              echo "🔍 Testing package: $pkg"
              python run_tests.py --packages "$pkg" --"$test_type" --jobs 4 --timeout 120 --verbose
            done
          else
            # 运行所有包
            python run_tests.py --quick --"$test_type" --jobs 4 --timeout 120 --report unit_test_report.html --summary
          fi
        else
          echo "📊 Running direct pytest..."
          cd ../../packages
          for package in sage-common sage-kernel sage-libs sage-middleware; do
            if [ -d "$package/tests" ]; then
              echo "🧪 Testing $package..."
              cd "$package"
              python -m pytest tests/ -v --tb=short --cov=src --cov-report=term-missing --timeout=60 --junit-xml=test-results.xml || echo "⚠️ $package tests failed"
              cd ..
            fi
          done
        fi
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          tools/tests/unit_test_report.html
          packages/*/test-results.xml
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: self-hosted
    needs: [test-discovery, unit-tests]
    if: needs.test-discovery.outputs.has_tests == 'true' && (github.event_name == 'pull_request' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all')
    timeout-minutes: 45
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Full SAGE
      run: |
        echo "🚀 Installing full SAGE for integration tests..."
        chmod +x ./quickstart.sh
        ./quickstart.sh --minimal
        
        # Install additional test dependencies
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-xdist pytest-timeout pytest-html
        
    - name: Run Integration Tests
      run: |
        echo "🔗 Running integration tests..."
        cd tools/tests
        
        if [ -f run_tests.py ]; then
          echo "📊 Running integration test suite..."
          python run_tests.py --quick --integration --jobs 2 --timeout 300 --report integration_test_report.html --summary
        else
          echo "📊 Running manual integration tests..."
          # Run integration tests manually
          cd ../../packages
          for package in sage-common sage-kernel sage-libs sage-middleware; do
            if [ -d "$package/tests" ]; then
              echo "🔗 Integration testing $package..."
              cd "$package"
              python -m pytest tests/ -v -m "integration" --tb=short --timeout=180 || echo "⚠️ $package integration tests failed"
              cd ..
            fi
          done
        fi
        
    - name: Run Issues Manager Integration Tests
      run: |
        echo "🔧 Running issues manager integration tests..."
        cd tools/tests
        if [ -f test_issues_manager.sh ]; then
          bash test_issues_manager.sh --integration || echo "⚠️ Issues manager integration tests failed"
        fi
        
    - name: Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          tools/tests/integration_test_report.html
          tools/tests/test_issues_manager_*.log
        retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: self-hosted
    needs: [test-discovery, unit-tests]
    if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all'
    timeout-minutes: 60
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install SAGE with Performance Tools
      run: |
        echo "🚀 Installing SAGE with performance monitoring..."
        chmod +x ./quickstart.sh
        ./quickstart.sh --minimal
        
        # Install performance testing tools
        pip install pytest pytest-benchmark pytest-timeout pytest-html memory-profiler
        
    - name: Run Performance Tests
      run: |
        echo "⚡ Running performance tests..."
        cd tools/tests
        
        if [ -f run_tests.py ]; then
          echo "📊 Running performance test suite..."
          python run_tests.py --quick --performance --jobs 1 --timeout 600 --report performance_test_report.html --summary
        else
          echo "📊 Running manual performance tests..."
          cd ../../packages
          for package in sage-common sage-kernel sage-libs sage-middleware; do
            if [ -d "$package/tests" ]; then
              echo "⚡ Performance testing $package..."
              cd "$package"
              python -m pytest tests/ -v -m "performance" --tb=short --timeout=300 --benchmark-only || echo "⚠️ $package performance tests failed"
              cd ..
            fi
          done
        fi
        
    - name: Upload Performance Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: |
          tools/tests/performance_test_report.html
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: self-hosted
    needs: [test-discovery, unit-tests, integration-tests, performance-tests]
    if: always() && needs.test-discovery.outputs.has_tests == 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Download Test Artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts
        
    - name: Generate Summary Report
      run: |
        echo "📋 Generating test summary..."
        
        echo "# SAGE Framework Test Summary" > test_summary.md
        echo "## Test Execution Results" >> test_summary.md
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> test_summary.md
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> test_summary.md
        echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> test_summary.md
        echo "" >> test_summary.md
        
        echo "## Test Packages" >> test_summary.md
        echo "Packages with tests: ${{ needs.test-discovery.outputs.test_packages }}" >> test_summary.md
        echo "" >> test_summary.md
        
        echo "## Artifacts" >> test_summary.md
        if [ -d "test-artifacts" ]; then
          find test-artifacts -name "*.html" -o -name "*.xml" -o -name "*.log" | head -10 | while read file; do
            echo "- $(basename "$file")" >> test_summary.md
          done
        fi
        
        echo "## Workflow Information" >> test_summary.md
        echo "- **Trigger**: ${{ github.event_name }}" >> test_summary.md
        echo "- **Branch**: ${{ github.ref_name }}" >> test_summary.md
        echo "- **Commit**: ${{ github.sha }}" >> test_summary.md
        echo "- **Time**: $(date -u)" >> test_summary.md
        
        cat test_summary.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test_summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
