name: Build and Release

on:
  push:
    branches: [ main, main-dev ]
    tags: [ 'v*' ]
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  build-subpackages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [sage-common, sage-kernel, sage-middleware, sage-libs]
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
                
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
        
    - name: Get version
      id: version
      run: |
        # ‰ªé_version.pyËØªÂèñÁâàÊú¨Âè∑
        VERSION=$(python -c "
        import sys
        sys.path.insert(0, '.')
        from _version import __version__
        print(__version__)
        ")
        
        # Â¶ÇÊûúÊòØtagËß¶ÂèëÔºå‰ΩøÁî®tagÁâàÊú¨
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Build package ${{ matrix.package }}
      run: |
        echo "Building ${{ matrix.package }}..."
        cd packages/${{ matrix.package }}
        python -m build --wheel
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.package }}-wheels
        path: packages/${{ matrix.package }}/dist/*.whl
        retention-days: 30

  build-metapackage:
    needs: build-subpackages
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ needs.build-subpackages.outputs.version }}
      wheel-name: ${{ steps.build.outputs.wheel-name }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
                
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
        
    - name: Update dependencies for PyPI release
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # For release builds, replace local file dependencies with PyPI package names
        python -c "
        import re
        
        # Read current pyproject.toml
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        print('Original dependencies section:')
        print('=' * 50)
        
        # Show current dependencies section for debugging
        deps_match = re.search(r'dependencies = \[(.*?)\]', content, re.DOTALL)
        if deps_match:
            print(deps_match.group(0))
        
        print('=' * 50)
        
        # Replace local file dependencies with PyPI package names
        # Pattern: 'isage-PACKAGE @ file:./packages/sage-PACKAGE'
        # Replace with: 'isage-PACKAGE'
        new_content = re.sub(
            r'\"isage-([a-zA-Z_-]+) @ file:\./packages/sage-[a-zA-Z_-]+\"',
            r'\"isage-\1\"',
            content
        )
        
        # Also handle single quotes
        new_content = re.sub(
            r\"'isage-([a-zA-Z_-]+) @ file:\./packages/sage-[a-zA-Z_-]+'\",
            r\"'isage-\1'\",
            new_content
        )
        
        # Write updated content
        with open('pyproject.toml', 'w') as f:
            f.write(new_content)
        
        print('Updated dependencies section:')
        print('=' * 50)
        
        # Show updated dependencies section for verification
        with open('pyproject.toml', 'r') as f:
            updated_content = f.read()
            
        deps_match = re.search(r'dependencies = \[(.*?)\]', updated_content, re.DOTALL)
        if deps_match:
            print(deps_match.group(0))
            
        print('=' * 50)
        print('‚úÖ Dependencies updated for PyPI release')
        "
        
    - name: Build metapackage
      id: build
      run: |
        echo "Building metapackage..."
        python -m build --wheel
        
        # Ëé∑ÂèñÁîüÊàêÁöÑwheelÊñá‰ª∂Âêç
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        WHEEL_NAME=$(basename "$WHEEL_FILE")
        
        echo "wheel-name=$WHEEL_NAME" >> $GITHUB_OUTPUT
        echo "Built metapackage wheel: $WHEEL_NAME"
        
    - name: Upload metapackage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: metapackage-wheel
        path: dist/*.whl
        retention-days: 30

  test:
    needs: [build-subpackages, build-metapackage]
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*-wheels"
        merge-multiple: true
        path: test_wheels/
        
    - name: Test subpackage wheels
      run: |
        pip install pytest
        
        # Test individual subpackages
        for wheel in test_wheels/*.whl; do
          echo "Testing $(basename $wheel)..."
          pip install "$wheel" --force-reinstall
          
          # Basic import test based on package name
          if [[ $wheel == *"common"* ]]; then
            python -c "import sage.common; print('sage.common imported successfully')" || echo "Import failed (may be expected)"
          elif [[ $wheel == *"kernel"* ]]; then
            python -c "import sage.kernel; print('sage.kernel imported successfully')" || echo "Import failed (may be expected)"
          elif [[ $wheel == *"middleware"* ]]; then
            python -c "import sage.middleware; print('sage.middleware imported successfully')" || echo "Import failed (may be expected)"
          elif [[ $wheel == *"libs"* ]]; then
            python -c "import sage.libs; print('sage.libs imported successfully')" || echo "Import failed (may be expected)"
          fi
        done
        
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-subpackages, build-metapackage, test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: release_files/
        
    - name: Create Release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Ëé∑ÂèñÊâÄÊúâwheelÊñá‰ª∂
          const releaseDir = 'release_files';
          const files = fs.readdirSync(releaseDir);
          const wheelFiles = files.filter(f => f.endsWith('.whl'));
          
          // ÂàõÂª∫release
          const tag = context.ref.replace('refs/tags/', '');
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `SAGE ${tag}`,
            body: `
          ## SAGE ${tag}
          
          Multi-package release including all SAGE components.
          
          ### üì¶ Packages
          ${wheelFiles.map(f => `- \`${f}\``).join('\n')}
          
          ### üìã Installation
          \`\`\`bash
          # Install the main metapackage
          pip install ${wheelFiles.find(f => f.startsWith('isage-') && !f.includes('_')) || 'isage'}
          
          # Or install individual components
          pip install ${wheelFiles.filter(f => f.includes('_common')).map(f => f.split('-')[0] + '-common').join(' ')}
          \`\`\`
            `,
            draft: false,
            prerelease: tag.includes('rc') || tag.includes('beta') || tag.includes('alpha')
          });
          
          // ‰∏ä‰º†assets
          for (const file of wheelFiles) {
            const filePath = path.join(releaseDir, file);
            const content = fs.readFileSync(filePath);
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: file,
              data: content
            });
            
            console.log(`Uploaded ${file}`);
          }
          
    - name: Publish to PyPI (if configured)
      if: startsWith(github.ref, 'refs/tags/v') && env.PYPI_API_TOKEN != ''
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to PyPI..."
        pip install twine
        
        # ‰∏ä‰º†ÊâÄÊúâwheelÊñá‰ª∂Âà∞PyPIÔºå‰ΩøÁî®Èùû‰∫§‰∫íÊ®°Âºè
        python -m twine upload \
          --username __token__ \
          --password "$PYPI_API_TOKEN" \
          --non-interactive \
          --skip-existing \
          --verbose \
          release_files/*.whl
          
        echo "Published to PyPI successfully"
        
  cleanup:
    if: always()
    needs: [build-subpackages, build-metapackage, test, release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          // Ê∏ÖÁêÜË∂ÖËøá30Â§©ÁöÑartifacts
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < thirtyDaysAgo) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted old artifact: ${artifact.name}`);
            }
          }
