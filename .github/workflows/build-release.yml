# ===============================================
# SAGE 构建和发布工作流 (Build and Release)
# ===============================================
# 目的：构建生产环境的 wheel 包并发布到 PyPI 和 GitHub Releases
#
# 触发条件：
# - 推送到 main 分支（稳定版本）
# - 推送 v* 标签（正式发布）
# - 发布 GitHub Release
#
# 与 ci.yml 的区别：
# - 此工作流专注于**打包和发布**
# - 构建生产环境的 wheel 包
# - 可以发布到 PyPI 和 GitHub Releases
# - 不运行详细的测试套件
#
# 构建流程：
# 1. 构建子包 (sage-common, sage-kernel, sage-middleware, sage-libs)
# 2. 构建 meta 包 (isage) - 依赖所有子包
# 3. 运行基本测试验证 wheel 包
# 4. 发布到 GitHub Releases 和 PyPI (仅限标签触发)
# ===============================================

name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: '3.11'  # 统一使用的 Python 版本
  
jobs:
  # ===================
  # 子包构建任务
  # ===================
  # 功能：并行构建所有 SAGE 子包的 wheel 文件
  # 策略：使用 matrix 策略并行构建 4 个子包
  # 输出：每个子包的 .whl 文件作为 artifacts
  build-subpackages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [sage-common, sage-kernel, sage-middleware, sage-libs]
    
    outputs:
      version: ${{ steps.version.outputs.version }}  # 输出版本号供后续任务使用
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史，用于版本计算
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
                
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
        
    # 从 _version.py 读取版本号，或使用 git tag
    - name: Get version
      id: version
      run: |
        # 从_version.py读取版本号
        VERSION=$(python -c "
        import sys
        sys.path.insert(0, '.')
        from _version import __version__
        print(__version__)
        ")
        
        # 如果是tag触发，使用tag版本
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    # 构建指定的子包
    - name: Build package ${{ matrix.package }}
      run: |
        echo "Building ${{ matrix.package }}..."
        cd packages/${{ matrix.package }}
        python -m build --wheel
        
    # 上传构建的 wheel 文件作为 artifacts
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.package }}-wheels
        path: packages/${{ matrix.package }}/dist/*.whl
        retention-days: 30

  # ===================
  # Meta 包构建任务
  # ===================
  # 功能：构建主要的 SAGE meta 包 (isage)
  # 依赖：必须等待所有子包构建完成
  # 特殊处理：发布时替换本地依赖为 PyPI 包名
  build-metapackage:
    needs: build-subpackages  # 等待所有子包构建完成
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ needs.build-subpackages.outputs.version }}     # 从子包任务获取版本号
      wheel-name: ${{ steps.build.outputs.wheel-name }}           # 输出 wheel 文件名
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
                
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel
        
    # 关键步骤：发布时替换本地文件依赖为 PyPI 包名
    # 例如：'isage-common @ file:./packages/sage-common' → 'isage-common'
    - name: Update dependencies for PyPI release
      if: startsWith(github.ref, 'refs/tags/v')  # 仅在标签发布时执行
      run: |
        # For release builds, replace local file dependencies with PyPI package names
        python -c "
        import re
        
        # Read current pyproject.toml
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        print('Original dependencies section:')
        print('=' * 50)
        
        # Show current dependencies section for debugging
        deps_match = re.search(r'dependencies = \[(.*?)\]', content, re.DOTALL)
        if deps_match:
            print(deps_match.group(0))
        
        print('=' * 50)
        
        # Replace local file dependencies with PyPI package names
        # Pattern: 'isage-PACKAGE @ file:./packages/sage-PACKAGE' → 'isage-PACKAGE'
        new_content = re.sub(
            r'\"isage-([a-zA-Z_-]+) @ file:\./packages/sage-[a-zA-Z_-]+\"',
            r'\"isage-\1\"',
            content
        )
        
        # Also handle single quotes
        new_content = re.sub(
            r\"'isage-([a-zA-Z_-]+) @ file:\./packages/sage-[a-zA-Z_-]+'\",
            r\"'isage-\1'\",
            new_content
        )
        
        # Write updated content
        with open('pyproject.toml', 'w') as f:
            f.write(new_content)
        
        print('Updated dependencies section:')
        print('=' * 50)
        
        # Show updated dependencies section for verification
        with open('pyproject.toml', 'r') as f:
            updated_content = f.read()
            
        deps_match = re.search(r'dependencies = \[(.*?)\]', updated_content, re.DOTALL)
        if deps_match:
            print(deps_match.group(0))
            
        print('=' * 50)
        print('✅ Dependencies updated for PyPI release')
        "
        
    # 构建 meta 包 wheel
    - name: Build metapackage
      id: build
      run: |
        echo "Building metapackage..."
        python -m build --wheel
        
        # 获取生成的wheel文件名
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        WHEEL_NAME=$(basename "$WHEEL_FILE")
        
        echo "wheel-name=$WHEEL_NAME" >> $GITHUB_OUTPUT
        echo "Built metapackage wheel: $WHEEL_NAME"
        
    # 上传 meta 包 wheel 文件
    - name: Upload metapackage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: metapackage-wheel
        path: dist/*.whl
        retention-days: 30

  # ===============
  # 基本测试任务
  # ===============
  # 功能：验证构建的 wheel 包可以正确安装和导入
  # 策略：测试多个 Python 版本的兼容性
  # 范围：基本的包导入测试，不运行完整的测试套件
  test:
    needs: [build-subpackages, build-metapackage]  # 等待所有包构建完成
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']  # 测试多个 Python 版本
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    # 下载所有构建的 wheel 文件
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*-wheels"
        merge-multiple: true
        path: test_wheels/
        
    # 测试每个子包的基本导入功能
    - name: Test subpackage wheels
      run: |
        pip install pytest
        
        # Test individual subpackages
        for wheel in test_wheels/*.whl; do
          echo "Testing $(basename $wheel)..."
          pip install "$wheel" --force-reinstall
          
          # Basic import test based on package name
          if [[ $wheel == *"common"* ]]; then
            python -c "import sage.common; print('sage.common imported successfully')" || echo "Import failed (may be expected)"
          elif [[ $wheel == *"kernel"* ]]; then
            python -c "import sage.kernel; print('sage.kernel imported successfully')" || echo "Import failed (may be expected)"
          elif [[ $wheel == *"middleware"* ]]; then
            python -c "import sage.middleware; print('sage.middleware imported successfully')" || echo "Import failed (may be expected)"
          elif [[ $wheel == *"libs"* ]]; then
            python -c "import sage.libs; print('sage.libs imported successfully')" || echo "Import failed (may be expected)"
          fi
        done
        
  # ================
  # 发布任务
  # ================
  # 功能：发布到 GitHub Releases 和 PyPI
  # 触发：仅在推送 v* 标签时执行
  # 包含：所有构建的 wheel 文件
  release:
    if: startsWith(github.ref, 'refs/tags/v')  # 仅在标签发布时运行
    needs: [build-subpackages, build-metapackage, test]  # 等待构建和测试完成
    runs-on: ubuntu-latest
    
    steps:
    # 下载所有构建的 artifacts
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: release_files/
        
    # 创建 GitHub Release 并上传所有 wheel 文件
    - name: Create Release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // 获取所有wheel文件
          const releaseDir = 'release_files';
          const files = fs.readdirSync(releaseDir);
          const wheelFiles = files.filter(f => f.endsWith('.whl'));
          
          // 创建release
          const tag = context.ref.replace('refs/tags/', '');
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `SAGE ${tag}`,
            body: `
          ## SAGE ${tag}
          
          Multi-package release including all SAGE components.
          
          ### 📦 Packages
          ${wheelFiles.map(f => `- \`${f}\``).join('\n')}
          
          ### 📋 Installation
          \`\`\`bash
          # Install the main metapackage
          pip install ${wheelFiles.find(f => f.startsWith('isage-') && !f.includes('_')) || 'isage'}
          
          # Or install individual components
          pip install ${wheelFiles.filter(f => f.includes('_common')).map(f => f.split('-')[0] + '-common').join(' ')}
          \`\`\`
            `,
            draft: false,
            prerelease: tag.includes('rc') || tag.includes('beta') || tag.includes('alpha')
          });
          
          // 上传assets
          for (const file of wheelFiles) {
            const filePath = path.join(releaseDir, file);
            const content = fs.readFileSync(filePath);
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: file,
              data: content
            });
            
            console.log(`Uploaded ${file}`);
          }
          
    # 发布到 PyPI (如果配置了 API Token)
    - name: Publish to PyPI (if configured)
      if: startsWith(github.ref, 'refs/tags/v') && env.PYPI_API_TOKEN != ''
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to PyPI..."
        pip install twine
        
        # 上传所有wheel文件到PyPI，使用非交互模式
        python -m twine upload \
          --username __token__ \
          --password "$PYPI_API_TOKEN" \
          --non-interactive \
          --skip-existing \
          --verbose \
          release_files/*.whl
          
        echo "Published to PyPI successfully"
        
  # ==================
  # 清理任务
  # ==================
  # 功能：清理旧的 artifacts，节省存储空间
  # 执行：无论其他任务成功失败都会执行
  # 策略：删除超过 30 天的 artifacts
  cleanup:
    if: always()  # 无论其他任务成功失败都执行
    needs: [build-subpackages, build-metapackage, test, release]
    runs-on: ubuntu-latest
    
    steps:
    # 使用 GitHub API 清理超过 30 天的旧 artifacts
    - name: Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          // 清理超过30天的artifacts
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < thirtyDaysAgo) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted old artifact: ${artifact.name}`);
            }
          }
