name: "CI"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  HF_ENDPOINT: https://hf-mirror.com
  CACHE_VERSION: v2-simplified-prod

jobs:
  build-and-test:
    name: Build and Test SAGE
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          clean: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install System Dependencies
        run: |
          echo "🔧 系统依赖将由quickstart.sh统一管理..."
          echo "跳过单独的系统依赖安装步骤"

      - name: Install SAGE
        run: |
          echo "🚀 安装SAGE生产版本（标准模式，包含C++扩展）..."
          chmod +x ./quickstart.sh
          ./quickstart.sh --standard --pip --yes
        timeout-minutes: 25

      - name: Verify C++ Extensions
        run: |
          echo "验证C++扩展安装..."
          
          # 验证构建结果
          if find packages/sage-middleware/src/sage/middleware/components/ -name "*.so" -type f | grep -q "\.so"; then
            echo "✅ 找到C++扩展文件:"
            find packages/sage-middleware/src/sage/middleware/components/ -name "*.so" -type f
          else
            echo "❌ 未找到.so文件，扩展可能未正确构建"
          fi

      - name: Verify Installation
        run: |
          echo "✅ 验证SAGE安装..."
          python -c "import sage; print('✅ SAGE imported')"
          python -c "import sage.common; print('✅ sage.common imported')"
          
          # 验证扩展状态
          python -c "
          try:
              from sage.middleware.components.extensions_compat import check_extensions_availability
              available = check_extensions_availability()
              total = sum(available.values())
              print(f'🧩 扩展可用性: {total}/{len(available)}')
          except ImportError:
              print('⚠️ 扩展兼容性模块不可用，跳过检查')
          "

      - name: Run Core Tests
        run: |
          echo "🧪 运行核心测试..."
          python -c "import sage; import sage.common; print('✅ 核心导入测试通过')"
          
          if command -v sage >/dev/null 2>&1; then
            sage --help > /dev/null && echo "✅ CLI测试通过"
          fi

      - name: Run Examples Smoke Test
        run: |
          echo "🌟 运行Examples冒烟测试..."
          pip install -e packages/sage-tools[cli]
          
          # 运行快速冒烟测试（5分钟超时）
          if [ -f "./tools/tests/run_examples_tests.sh" ]; then
            chmod +x ./tools/tests/run_examples_tests.sh
            timeout 300s ./tools/tests/run_examples_tests.sh --quick || {
              echo "⚠️ Examples测试超时或失败，但不阻断主要流程"
              exit 0
            }
          else
            echo "ℹ️ Examples测试脚本不存在，跳过"
          fi

  deployment-ready:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment Status
        run: |
          echo "🚀 部署就绪检查"
          echo "✅ 所有测试通过"
          echo "✅ 主分支推送"
          echo "🎉 SAGE已准备好部署"