name: "CI"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
  HF_ENDPOINT: https://hf-mirror.com
  CACHE_VERSION: v2-simplified-prod

jobs:
  build-and-test:
    name: Build and Test SAGE
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          clean: true
          submodules: 'recursive'

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Create .env File from Secrets
        run: |
          echo "🔐 从 GitHub Secrets 创建 .env 文件..."
          cat > .env << EOF
          # CI Environment Configuration (Auto-generated from GitHub Secrets)
          # This file is created during CI/CD and should not be committed to git
          
          # ==================================================
          # LLM Service API Keys
          # ==================================================
          
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
          OPENAI_MODEL_NAME=qwen-turbo-2025-02-11
          
          SILICONCLOUD_API_KEY=${{ secrets.SILICONCLOUD_API_KEY }}
          JINA_API_KEY=${{ secrets.JINA_API_KEY }}
          ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY }}
          
          # vLLM configuration for local/self-hosted services
          VLLM_API_KEY=${{ secrets.VLLM_API_KEY }}
          VLLM_BASE_URL=http://localhost:8000/v1
          VLLM_MODEL_NAME=meta-llama/Llama-2-13b-chat-hf
          
          WEB_SEARCH_API_KEY=${{ secrets.WEB_SEARCH_API_KEY }}
          
          # ==================================================
          # GitHub Token for Repository Access
          # ==================================================
          
          GIT_TOKEN=${{ secrets.GIT_TOKEN }}
          
          # ==================================================
          # Hugging Face Configuration
          # ==================================================
          
          HF_TOKEN=${{ secrets.HF_TOKEN }}
          HF_ENDPOINT=https://hf-mirror.com
          
          # ==================================================
          # CI/CD Settings
          # ==================================================
          
          SAGE_DEBUG=false
          SAGE_SKIP_CPP_EXTENSIONS=false
          SAGE_LOG_LEVEL=INFO
          SAGE_TEST_MODE=true
          SAGE_EXAMPLES_MODE=test
          EOF
          
          echo "✅ .env 文件创建完成"
          echo "📋 验证 .env 文件内容（隐藏敏感信息）:"
          cat .env | grep -E "^[A-Z_]+=.+" | sed 's/=.*/=***/' || echo "⚠️ .env 文件为空或格式不正确"

      - name: Install System Dependencies
        run: |
          echo "🔧 安装C++扩展构建所需的系统依赖..."
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            pkg-config \
            libopenblas-dev \
            liblapack-dev \
            git
          
          echo "✅ 系统依赖安装完成"
          echo "📋 验证关键工具："
          gcc --version | head -1
          g++ --version | head -1
          cmake --version | head -1
          make --version | head -1

      - name: Verify Submodules
        run: |
          echo "� 验证Git子模块..."
          git submodule status
          
          # 验证关键子模块
          echo ""
          echo "� 验证关键子模块目录："
          for submodule in \
            "packages/sage-middleware/src/sage/middleware/components/sage_db/sageDB" \
            "packages/sage-middleware/src/sage/middleware/components/sage_flow/sageFlow" \
            "packages/sage-middleware/src/sage/middleware/components/sage_tsdb/sageTSDB"; do
            if [ -d "$submodule" ]; then
              echo "✅ $submodule 存在"
              ls -la "$submodule" | head -5
            else
              echo "❌ $submodule 缺失"
            fi
            echo ""
          done

      - name: Install SAGE
        run: |
          echo "🚀 安装SAGE（标准模式，包含C++扩展）..."
          echo "📝 环境变量设置："
          echo "  CI=true"
          echo "  PATH=$PATH"
          
          # 确保PATH包含用户安装的脚本
          export PATH="$HOME/.local/bin:$PATH"
          
          chmod +x ./quickstart.sh
          
          # 在CI环境中，quickstart.sh会自动检测并安装系统依赖
          # 然后调用 'sage extensions install all' 来构建C++扩展
          echo ""
          echo "开始安装（将构建C++扩展）..."
          ./quickstart.sh --standard --pip --yes
          
          echo ""
          echo "✅ 安装脚本执行完成"
          echo "📋 检查安装日志中的扩展构建信息："
          if [ -f "install.log" ]; then
            echo "查找C++扩展构建相关日志..."
            grep -A 5 "安装C++扩展" install.log || echo "未找到扩展构建日志"
            echo ""
            grep -A 5 "extensions install" install.log || echo "未找到extensions install命令日志"
          fi
        timeout-minutes: 25

      - name: Verify C++ Extensions
        run: |
          echo "🧩 验证C++扩展安装状态..."
          
          # 检查子模块目录结构
          echo ""
          echo "� 检查子模块目录结构："
          for component in sage_db sage_flow; do
            component_dir="packages/sage-middleware/src/sage/middleware/components/${component}"
            if [ -d "$component_dir" ]; then
              echo "✅ $component 目录存在"
              # 检查是否有子模块目录
              if [ "$component" = "sage_db" ] && [ -d "${component_dir}/sageDB" ]; then
                echo "  ✅ sageDB 子模块已初始化"
                ls -la "${component_dir}/sageDB" | head -5
              elif [ "$component" = "sage_flow" ] && [ -d "${component_dir}/sageFlow" ]; then
                echo "  ✅ sageFlow 子模块已初始化"
                ls -la "${component_dir}/sageFlow" | head -5
              else
                echo "  ❌ 子模块目录未找到"
              fi
            else
              echo "❌ $component 目录不存在"
            fi
          done
          
          # 检查.so文件
          echo ""
          echo "📁 检查已编译的.so文件:"
          so_files=$(find packages/sage-middleware/src/sage/middleware/components/ -name "*.so" -type f 2>/dev/null || true)
          if [ -n "$so_files" ]; then
            echo "✅ 找到C++扩展文件:"
            echo "$so_files"
            
            # 检查每个.so文件的依赖
            echo ""
            echo "🔗 检查.so文件依赖:"
            for so in $so_files; do
              echo "  文件: $so"
              ldd "$so" 2>&1 | head -10 || echo "    无法检查依赖"
            done
          else
            echo "❌ 未找到.so文件"
            echo "🔍 可能的构建日志位置："
            find . -name "CMakeError.log" -o -name "make_output.log" 2>/dev/null | head -5 || true
          fi
          
          # 检查扩展功能可用性
          echo ""
          echo "🔍 测试扩展Python导入:"
          python -c "
          import sys
          print(f'Python 版本: {sys.version}')
          print(f'Python 路径: {sys.executable}')
          print()
          
          # 尝试导入扩展
          extensions_status = {}
          
          # 测试 sage_db
          try:
              from sage.middleware.components.sage_db.python import sage_db
              print('✅ sage_db Python wrapper 导入成功')
              try:
                  from sage.middleware.components.sage_db.python import _sage_db
                  print('✅ _sage_db C++ extension 导入成功')
                  extensions_status['sage_db'] = True
              except ImportError as e:
                  print(f'❌ _sage_db C++ extension 导入失败: {e}')
                  extensions_status['sage_db'] = False
          except Exception as e:
              print(f'❌ sage_db 导入失败: {e}')
              extensions_status['sage_db'] = False
          
          print()
          
          # 测试 sage_flow
          try:
              from sage.middleware.components.sage_flow.python import sage_flow
              print('✅ sage_flow Python wrapper 导入成功')
              try:
                  from sage.middleware.components.sage_flow.python import _sage_flow
                  print('✅ _sage_flow C++ extension 导入成功')
                  extensions_status['sage_flow'] = True
              except ImportError as e:
                  print(f'❌ _sage_flow C++ extension 导入失败: {e}')
                  extensions_status['sage_flow'] = False
          except Exception as e:
              print(f'❌ sage_flow 导入失败: {e}')
              extensions_status['sage_flow'] = False
          
          print()
          
          # 使用兼容性检查
          try:
              from sage.middleware.components.extensions_compat import check_extensions_availability
              available = check_extensions_availability()
              total = sum(available.values())
              print(f'🧩 扩展可用性总结: {total}/{len(available)}')
              for ext, status in available.items():
                  symbol = '✅' if status else '❌'
                  print(f'  {symbol} {ext}: {\"可用\" if status else \"不可用\"}')
              
              if total == 0:
                  print()
                  print('⚠️ 警告: 没有C++扩展可用')
                  print('这将导致某些测试失败')
                  sys.exit(1)
              else:
                  print()
                  print(f'✅ {total}个扩展可用，继续测试')
          except ImportError as e:
              print(f'❌ 扩展检查模块不可用: {e}')
              import traceback
              traceback.print_exc()
              sys.exit(1)
          "

      - name: Verify Installation
        run: |
          echo "✅ 验证SAGE安装..."
          python -c "import sage; print('✅ SAGE imported')"
          python -c "import sage.common; print('✅ sage.common imported')"
          
          # 验证扩展状态
          python -c "
          try:
              from sage.middleware.components.extensions_compat import check_extensions_availability
              available = check_extensions_availability()
              total = sum(available.values())
              print(f'🧩 扩展可用性: {total}/{len(available)}')
          except ImportError:
              print('⚠️ 扩展兼容性模块不可用，跳过检查')
          "

      - name: Run Architecture Compliance Check
        run: |
          echo "🏗️ 运行架构合规性检查..."
          
          # 在 PR 中仅检查变更文件
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "📝 PR 模式：检查变更文件"
            python tools/architecture_checker.py \
              --changed-only \
              --diff "origin/${{ github.base_ref }}" \
              --strict || {
                echo ""
                echo "❌ 架构合规性检查失败！"
                echo "请查看上方日志了解详细信息"
                echo "文档: docs/PACKAGE_ARCHITECTURE.md"
                exit 1
              }
          else
            echo "📦 Push 模式：快速检查（仅扫描导入语句）"
            # 在 push 时做快速检查，避免阻塞
            python tools/architecture_checker.py --changed-only --diff HEAD~5 || {
              echo ""
              echo "⚠️  发现架构问题，但不阻塞 CI"
              echo "请尽快修复: docs/PACKAGE_ARCHITECTURE.md"
            }
          fi
          
          echo ""
          echo "✅ 架构检查完成"

      - name: Run Core Tests
        run: |
          echo "🧪 运行核心测试..."
          python -c "import sage; import sage.common; print('✅ 核心导入测试通过')"
          
          if command -v sage >/dev/null 2>&1; then
            sage --help > /dev/null && echo "✅ CLI测试通过"
          fi

      - name: Run Unit Tests with Coverage
        run: |
          echo "🧪 运行单元测试并收集覆盖率..."
          # 安装测试依赖
          pip install pytest pytest-cov pytest-timeout
          
          # 运行测试并生成覆盖率报告
          pytest -v \
            --cov=packages \
            --cov-report=xml:coverage.xml \
            --cov-report=term \
            --cov-report=html:htmlcov \
            --timeout=300 \
            -m "not slow" || {
              echo "⚠️ 部分测试失败，但继续收集覆盖率数据"
              exit 0
            }

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-sage
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Run Examples Smoke Test
        run: |
          echo "🌟 运行Examples冒烟测试..."
          # 安装测试所需的dev依赖（包含pytest）
          pip install -e packages/sage-tools[dev]
          
          # 运行快速冒烟测试（5分钟超时）
          if [ -f "./tools/tests/run_examples_tests.sh" ]; then
            chmod +x ./tools/tests/run_examples_tests.sh
            timeout 300s ./tools/tests/run_examples_tests.sh --quick || {
              echo "⚠️ Examples测试超时或失败，但不阻断主要流程"
              exit 0
            }
          else
            echo "ℹ️ Examples测试脚本不存在，跳过"
          fi