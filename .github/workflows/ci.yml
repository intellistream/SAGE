---
name: CI

on:
  push:
    branches: [main]  # 只在推送到main分支时运行
  pull_request:
    branches: [main]  # 只处理PR到main分支
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

# 并发控制：同一PR只运行最新的CI，取消之前的运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  HF_ENDPOINT: https://hf-mirror.com

jobs:
  test:
    name: SAGE Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          fetch-depth: 1
          clean: true
        timeout-minutes: 8

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'
        timeout-minutes: 10
        continue-on-error: false

      - name: Verify Python Installation
        run: |
          python --version
          pip --version
          which python
          which pip
        timeout-minutes: 2

      - name: Setup pip and prepare environment
        run: |
          echo "📦 准备Python环境..."
          echo "📦 升级pip..."
          pip install --upgrade pip --no-cache-dir
          echo "📊 环境状态:"
          echo "- Python: $(python --version)"
          echo "- Pip: $(pip --version)"
          echo "✅ 环境准备完成"
        timeout-minutes: 5

      - name: Cache System Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            /tmp/apt-cache
          key: ${{ runner.os }}-system-deps-${{ hashFiles('.github/workflows/dev-ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-deps-

      - name: Install System Dependencies (C++ Extensions)
        run: |
          echo "📦 检查是否需要安装系统依赖..."

          # 检查是否需要编译C++扩展
          needs_cpp=false

          # 检查是否有需要编译的C++模块
          if [ -f "packages/sage-middleware/src/sage/middleware/components/sage_db/CMakeLists.txt" ]; then
            needs_cpp=true
            echo "🔍 检测到C++扩展模块，需要安装编译工具"
          fi

          if [ "$needs_cpp" = true ]; then
            echo "📦 安装C++编译依赖..."

            # 更新包列表
            echo "📥 更新包列表..."
            sudo apt-get update -qq

            # 安装编译依赖
            echo "📦 安装编译工具..."
            sudo apt-get install -y --no-install-recommends \
              build-essential \
              cmake \
              pkg-config \
              libopenblas-dev \
              libopenblas0 \
              liblapack-dev || {
              echo "⚠️ 系统依赖安装失败，但继续执行（C++扩展可能不可用）"
            }
          else
            echo "✅ 无需安装C++编译依赖，跳过"
          fi
        timeout-minutes: 15
        continue-on-error: true

      - name: Install SAGE
        env:
          CI: true
          DEBIAN_FRONTEND: noninteractive
          PIP_NO_INPUT: 1
          PIP_DISABLE_PIP_VERSION_CHECK: 1
          PIP_PARALLEL_BUILDS: 4
          MAKEFLAGS: "-j4"
        run: |
          echo "🚀 CI模式：通过quickstart.sh --dev --pip安装SAGE"
          echo "ℹ️ 使用dev模式包含完整开发工具和CLI"
          echo "⏰ 预计安装时间: 8-15分钟"

          # 显示环境信息
          echo "📊 环境信息:"
          echo "- Python: $(python --version)"
          echo "- Python路径: $(which python)"
          echo "- Pip版本: $(pip --version)"
          echo "- 网络状态: $(ping -c 1 pypi.org >/dev/null 2>&1 && echo \"✅ 可达\" || echo \"❌ 不可达\")"

          echo "🎯 开始通过quickstart.sh dev模式安装..."

          # 设置错误捕获
          set -e
          trap 'exit_code=$?; echo "❌ SAGE installation failed with exit code $exit_code"; exit $exit_code' ERR

          chmod +x ./quickstart.sh
          if ! ./quickstart.sh --dev --pip --yes; then
            echo "❌ SAGE installation failed!"
            exit 1
          fi

          echo "✅ quickstart.sh dev模式安装完成"
        timeout-minutes: 30

      - name: Initialize Submodules (third-party deps)
        run: |
          echo "🔁 初始化子模块（third-party 依赖，如fmt/spdlog等）..."
          git submodule update --init --recursive || true
          echo "✅ 子模块初始化完成（若仓库无子模块则跳过）"

      - name: Build Native Extensions via CLI (sage_db + sage_flow)
        run: |
          echo "🧩 使用 CLI 构建并安装 C++ 扩展（sage_db 与 sage_flow）"
          if command -v sage >/dev/null 2>&1; then
            SAGE_CMD="sage"
          else
            SAGE_CMD="python -m sage.tools.cli.main"
          fi
          ${SAGE_CMD} extensions install all --force || echo "⚠️ 扩展构建失败（继续流水线，后续步骤将尝试运行示例并报告具体错误）"
          echo "✅ CLI 扩展构建步骤完成"

      - name: Code Quality Checks
        run: |
          echo "🔍 Running code quality checks..."
          black --check --diff packages/ || echo "⚠️ Code formatting issues found"
          isort --check-only --diff packages/ || echo "⚠️ Import sorting issues found"
          flake8 packages/ --count --select=E9,F63,F7,F82 --show-source --statistics
        timeout-minutes: 2

      - name: Run Examples Tests
        working-directory: ${{ github.workspace }}
        run: |
          echo "Running examples tests..."
          echo "🗂️ Current working directory: $(pwd)"
          echo "📁 Examples directory exists: $([ -d "examples" ] && echo "✅ Yes" || echo "❌ No")"
          if [ -d "examples" ]; then
            echo "📊 Examples directory contents:"
            ls -la examples/ | head -10
            echo "📊 Total example files found:"
            find examples/ -name "*.py" | wc -l
          fi

          echo "🧪 Testing path discovery from Python:"
          python3 -c "
          from tools.tests.test_examples import find_project_root, ExampleAnalyzer
          try:
              root = find_project_root()
              print(f'✅ Project root found: {root}')
              analyzer = ExampleAnalyzer()
              examples = analyzer.discover_examples()
              print(f'📋 Found {len(examples)} examples')
          except Exception as e:
              print(f'❌ Error: {e}')
              import traceback
              traceback.print_exc()
          "

          # 确保测试脚本可执行
          chmod +x ./tools/tests/run_examples_tests.sh

          # 运行examples测试
          echo "🧪 运行Examples测试套件..."
          if ./tools/tests/run_examples_tests.sh; then
            echo "✅ Examples测试通过"
            exit_code=0
          else
            exit_code=$?
            echo "❌ Examples测试失败"

            # 在CI环境中，某些示例可能因为缺少API密钥或外部服务而失败
            if [[ "$CI" == "true" ]]; then
              echo "⚠️ 在CI环境中，某些Examples可能因为缺少外部依赖而失败"
              echo "💡 执行基础验证以确保核心示例可用..."

              # 基础验证：检查是否能发现示例文件
              if python3 tools/tests/test_examples.py analyze 2>/dev/null; then
                echo "✅ 基础Examples发现功能可用"
                exit_code=0
              else
                echo "❌ 连基础Examples发现功能都无法使用"
                exit_code=1
              fi
            fi
          fi

          if [ $exit_code -eq 0 ]; then
            echo "Examples tests completed ✅"
          else
            echo "Examples tests failed ❌"
            exit $exit_code
          fi

      - name: Basic Import Tests
        env:
          PIP_NO_INPUT: 1
        run: |
          echo "=== Import Tests ==="
          echo "Testing SAGE package imports..."

          # 先检查Python路径和已安装的包
          echo "Python executable: $(which python)"
          echo "Python version: $(python --version)"
          echo "Checking installed isage packages:"
          pip list | grep isage || echo "No isage packages found"
          echo ""

          # 测试导入我们的SAGE包（增强调试信息）
          echo "Testing core SAGE imports:"
          echo "Step 1: Testing sage.common import..."
          python -c "import sage.common; print('✅ sage.common import successful')"

          echo "Step 2: Testing main sage package import..."
          python -c "import sage; print('✅ SAGE imported')"
          
          # 详细的版本检查和调试信息
          echo "=== 详细版本检查 ==="
          python -c "import sage; print('SAGE模块路径:', sage.__file__); print('SAGE模块目录:', sage.__file__.rsplit('/', 1)[0] if hasattr(sage, '__file__') else 'No __file__'); print('Has __version__:', hasattr(sage, '__version__')); print('Version:', sage.__version__) if hasattr(sage, '__version__') else print('Version: Not found') or print('Available attributes:', [attr for attr in dir(sage) if not attr.startswith('__')])"
          
          # _version模块检查
          echo "=== _version模块检查 ==="
          python -c "
          try:
              from sage._version import __version__
              print('_version module version:', __version__)
          except ImportError as e:
              print('_version模块导入失败:', e)
              import sage
              import os
              sage_dir = os.path.dirname(sage.__file__)
              print('SAGE目录内容:', os.listdir(sage_dir))
              version_file = os.path.join(sage_dir, '_version.py')
              print('_version.py存在:', os.path.exists(version_file))
              if os.path.exists(version_file):
                  with open(version_file, 'r') as f:
                      content = f.read()[:300]
                      print('_version.py内容:', content)
          "
          
          # 强制重新安装主包以确保版本同步
          echo "=== 强制重新安装主SAGE包确保版本同步 ==="
          pip install -e packages/sage --force-reinstall --no-deps
          
          # 重新验证版本
          echo "=== 重新验证版本信息 ==="
          python -c "import importlib; import sys; modules_to_remove = [name for name in sys.modules if name.startswith('sage')]; [sys.modules.pop(name, None) for name in modules_to_remove]; print('已清除', len(modules_to_remove), '个sage模块缓存'); import sage; print('重新导入后:'); print('Has __version__:', hasattr(sage, '__version__')); print('Version:', getattr(sage, '__version__', 'Not found'))"
          echo "Step 3: Verifying SAGE package path..."
          python -c "import sage, inspect; print('SAGE file:', getattr(sage, '__file__', 'No __file__'))"
          python -c "import sage; f = getattr(sage, '__file__', ''); print('Is correct package:', 'packages/sage' in f)"

          echo ""
          echo "Testing additional SAGE components:"
          python -c "import sage.kernel; print('✅ sage.kernel import successful')"
          python -c "import sage.libs; print('✅ sage.libs import successful')"
          python -c "import sage.middleware; print('✅ sage.middleware import successful')"

          echo "=== CLI Test ==="
          # 检查sage命令是否在PATH中
          if command -v sage >/dev/null 2>&1; then
            echo "✅ SAGE CLI found in PATH"
            sage --help > /dev/null && echo "✅ SAGE CLI help working"
            sage version && echo "✅ SAGE version command working"
          else
            echo "❌ SAGE CLI not found in PATH"
            echo "检查已安装的包和入口点:"
            python -c "import pkg_resources; [print(f'Found sage entry point: {ep}') for ep in pkg_resources.iter_entry_points('console_scripts') if ep.name == 'sage']"
            echo "检查python模块路径:"
            python -c "import sys; print('\n'.join(sys.path))"
            echo "尝试直接运行CLI模块:"
            python -m sage.tools.cli.main --help && echo "✅ CLI module works directly"
          fi

      - name: Extended Import & CLI Tests
        env:
          PIP_NO_INPUT: 1
        run: |
          echo "=== 扩展导入和CLI测试 ==="

          # 使用新的诊断功能进行完整导入测试
          sage dev test --diagnose

          # CLI功能测试
          echo "=== CLI功能测试 ==="
          if command -v sage >/dev/null 2>&1; then
            echo "✅ SAGE CLI found in PATH"
            sage --help > /dev/null && echo "✅ SAGE CLI help working"
            sage version && echo "✅ SAGE version command working"
          else
            echo "❌ SAGE CLI not found in PATH"
          fi

          echo "✅ 扩展测试完成"

      - name: PyPI Release Validation
        env:
          PIP_NO_INPUT: 1
          PYTHONUNBUFFERED: 1
        run: |
          echo "=== PyPI发布准备验证 ==="

          # 检查PyPI验证工具是否可用
          if command -v sage >/dev/null 2>&1; then
            echo "🔍 运行完整PyPI发布准备验证..."

            # 运行PyPI验证，使用超时以防卡住
            timeout 1800 sage dev pypi validate --verbose || {
              exit_code=$?
              if [ $exit_code -eq 124 ]; then
                echo "⚠️  PyPI验证超时（30分钟），但这可能是由于网络较慢"
                echo "🔧 尝试运行快速验证模式..."
                sage dev pypi validate --fast && echo "✅ 快速验证通过" || echo "❌ 快速验证也失败"
              else
                echo "❌ PyPI验证失败，退出码: $exit_code"
                echo "🔧 尝试运行快速验证模式..."
                sage dev pypi validate --fast && echo "⚠️  快速验证通过，但完整验证失败" || echo "❌ 快速验证也失败"
                exit $exit_code
              fi
            }

            echo "✅ PyPI发布准备验证完成"
          else
            echo "❌ SAGE CLI不可用，跳过PyPI验证"
            exit 1
          fi

