name: Documentation Quality Check

on:
  pull_request:
    paths:
      - 'docs/**'
      - 'packages/*/README.md'
      - 'examples/*/README.md'
      - 'tools/devnotes_checker.py'
      - 'tools/package_readme_checker.py'
  push:
    branches:
      - main
      - develop
      - 'feature/*'
    paths:
      - 'docs/**'
      - 'packages/*/README.md'
      - 'examples/*/README.md'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  check-documentation:
    name: Check Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff checking
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Check dev-notes documentation
        run: |
          echo "::group::Dev-notes Documentation Check"
          python tools/devnotes_checker.py --changed-only
          echo "::endgroup::"
      
      - name: Check package README quality
        run: |
          echo "::group::Package README Quality Check"
          python tools/package_readme_checker.py --all
          echo "::endgroup::"
      
      - name: Generate documentation report
        if: always()
        run: |
          echo "::group::Generate Documentation Report"
          python tools/package_readme_checker.py --all --report --output /tmp/readme_report.md
          cat /tmp/readme_report.md
          echo "::endgroup::"
      
      - name: Check for common issues
        run: |
          echo "::group::Check for Common Issues"
          
          # Check for placeholder text
          echo "Checking for placeholder text..."
          if grep -r "{[A-Z_]*}" docs/ packages/*/README.md | grep -v ".git" | grep -v "TEMPLATE"; then
            echo "::warning::Found placeholder text in documentation"
          fi
          
          # Check for broken relative links (basic)
          echo "Checking for potential broken links..."
          if grep -r "\](.*\.md)" docs/ packages/*/README.md | grep -v ".git" | grep -v "http" > /tmp/links.txt; then
            echo "Found $(wc -l < /tmp/links.txt) relative markdown links"
          fi
          
          echo "::endgroup::"
      
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: documentation-quality-report
          path: /tmp/readme_report.md
          retention-days: 30
      
      - name: Comment PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('/tmp/readme_report.md', 'utf8');
            
            // Create a comment with the report summary
            const body = `## ðŸ“š Documentation Quality Report\n\n${report.slice(0, 2000)}...\n\nFull report available in artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
