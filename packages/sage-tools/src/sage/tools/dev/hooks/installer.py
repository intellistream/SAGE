"""
Git Hooks Installer for SAGE Development.

Handles installation, uninstallation, and management of Git hooks
for code quality and architecture compliance checks.
"""

import subprocess
import sys
from pathlib import Path


class HooksInstaller:
    """Installer for SAGE Git hooks."""

    def __init__(self, root_dir: Path | None = None, quiet: bool = False):
        """
        Initialize the hooks installer.

        Args:
            root_dir: Root directory of the SAGE project. If None, auto-detect from git.
            quiet: If True, suppress non-error output.
        """
        self.quiet = quiet
        self.root_dir = root_dir or self._detect_git_root()
        self.hooks_dir = self.root_dir / ".git" / "hooks"
        self.templates_dir = Path(__file__).parent / "templates"

        # Colors for output
        self.RED = "\033[0;31m"
        self.GREEN = "\033[0;32m"
        self.YELLOW = "\033[1;33m"
        self.BLUE = "\033[0;34m"
        self.NC = "\033[0m"

    def _detect_git_root(self) -> Path:
        """Detect the Git repository root directory."""
        try:
            result = subprocess.run(
                ["git", "rev-parse", "--show-toplevel"],
                capture_output=True,
                text=True,
                check=True,
            )
            return Path(result.stdout.strip())
        except (subprocess.CalledProcessError, FileNotFoundError):
            # Fall back to current directory
            return Path.cwd()

    def _print_info(self, message: str) -> None:
        """Print info message (respecting quiet mode)."""
        if not self.quiet:
            print(message)

    def _print_success(self, message: str) -> None:
        """Print success message (respecting quiet mode)."""
        if not self.quiet:
            print(f"{self.GREEN}{message}{self.NC}")

    def _print_warning(self, message: str) -> None:
        """Print warning message (always shown)."""
        print(f"{self.YELLOW}{message}{self.NC}")

    def _print_error(self, message: str) -> None:
        """Print error message (always shown)."""
        print(f"{self.RED}{message}{self.NC}", file=sys.stderr)

    def _check_git_repo(self) -> bool:
        """Check if we're in a Git repository."""
        git_dir = self.root_dir / ".git"
        if not git_dir.exists():
            self._print_error("‚ùå ÈîôËØØ: ‰∏çÂú® Git ‰ªìÂ∫ì‰∏≠")
            return False
        return True

    def _backup_existing_hook(self, hook_path: Path) -> None:
        """Backup existing hook if it exists and is not a symlink."""
        # Check if it's a broken symlink
        if hook_path.is_symlink() and not hook_path.exists():
            # It's a broken symlink, just remove it
            hook_path.unlink()
            self._print_warning(f"‚ö†Ô∏è  Âà†Èô§ÊçüÂùèÁöÑÁ¨¶Âè∑ÈìæÊé•: {hook_path.name}")
            return

        if hook_path.exists() and not hook_path.is_symlink():
            from datetime import datetime

            backup_name = f"{hook_path.name}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            backup_path = hook_path.parent / backup_name
            self._print_warning(f"‚ö†Ô∏è  Â§á‰ªΩÁé∞Êúâ {hook_path.name} hook Âà∞: {backup_name}")
            hook_path.rename(backup_path)

    def _install_pre_commit_hook(self) -> bool:
        """Install the pre-commit hook."""
        self._print_info("")
        self._print_info("üì¶ ÂÆâË£Ö pre-commit hook...")

        pre_commit_template = self.templates_dir / "pre-commit"
        pre_commit_dst = self.hooks_dir / "pre-commit"

        if not pre_commit_template.exists():
            self._print_error(f"‚ùå ÈîôËØØ: Êâæ‰∏çÂà∞ pre-commit Ê®°ÊùøÊñá‰ª∂: {pre_commit_template}")
            return False

        # Ensure hooks directory exists
        self.hooks_dir.mkdir(parents=True, exist_ok=True)

        # Remove any existing hook (including broken symlinks)
        if pre_commit_dst.exists() or pre_commit_dst.is_symlink():
            self._backup_existing_hook(pre_commit_dst)

        # Copy the template
        import shutil

        shutil.copy2(pre_commit_template, pre_commit_dst)
        pre_commit_dst.chmod(0o755)

        self._print_success("‚úÖ pre-commit hook Â∑≤ÂÆâË£Ö")
        return True

    def _install_pre_commit_framework(self) -> bool:
        """Install and configure the pre-commit framework."""
        self._print_info("")
        self._print_info("üì¶ Ê£ÄÊü• pre-commit Ê°ÜÊû∂...")

        # Check if pre-commit is available
        try:
            subprocess.run(
                ["pre-commit", "--version"],
                capture_output=True,
                check=True,
            )
        except (subprocess.CalledProcessError, FileNotFoundError):
            self._print_warning("‚ö†Ô∏è  pre-commit Êú™ÂÆâË£Ö")
            self._print_info("   ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•Â∞ÜË¢´Ë∑≥Ëøá")
            self._print_info("   ÂÆâË£Ö: pip install pre-commit")
            return False

        # Install hooks
        self._print_info("   pre-commit Â∑≤ÂÆâË£ÖÔºåÈÖçÁΩÆ hooks...")
        pre_commit_config = self.root_dir / "tools" / "pre-commit-config.yaml"

        if not pre_commit_config.exists():
            self._print_warning(f"‚ö†Ô∏è  Êú™ÊâæÂà∞ pre-commit ÈÖçÁΩÆÊñá‰ª∂: {pre_commit_config}")
            return False

        try:
            subprocess.run(
                [
                    "pre-commit",
                    "install",
                    "--config",
                    str(pre_commit_config),
                    "--install-hooks",
                ],
                cwd=str(self.root_dir),
                capture_output=True,
                check=True,
            )
            self._print_success("‚úÖ pre-commit Ê°ÜÊû∂Â∑≤ÈÖçÁΩÆ")
            return True
        except subprocess.CalledProcessError:
            self._print_warning("‚ö†Ô∏è  pre-commit Ê°ÜÊû∂ÈÖçÁΩÆÂ§±Ë¥•")
            return False

    def _test_architecture_checker(self) -> bool:
        """Test if architecture checker is available."""
        if not self.quiet:
            self._print_info("")
            self._print_info("üß™ ÊµãËØï architecture checker...")

        # Try using sage-dev command first
        try:
            subprocess.run(
                ["sage-dev", "check-architecture", "--help"],
                capture_output=True,
                check=True,
            )
            if not self.quiet:
                self._print_success("‚úÖ Architecture checker ÂèØÁî® (sage-dev)")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            pass

        # Try Python module import
        try:
            subprocess.run(
                [
                    sys.executable,
                    "-c",
                    "from sage.tools.dev.tools.architecture_checker import ArchitectureChecker",
                ],
                capture_output=True,
                check=True,
            )
            if not self.quiet:
                self._print_success("‚úÖ Architecture checker ÂèØÁî® (Python module)")
            return True
        except subprocess.CalledProcessError:
            if not self.quiet:
                self._print_warning("‚ö†Ô∏è  Architecture checker ÊµãËØïÂ§±Ë¥•Ôºå‰ΩÜ hook Â∑≤ÂÆâË£Ö")
                self._print_info("   ÊÇ®ÂèØËÉΩÈúÄË¶ÅÂÆâË£Ö sage-tools: pip install -e packages/sage-tools")
            return False

    def install(self) -> bool:
        """
        Install Git hooks.

        Returns:
            True if installation was successful, False otherwise.
        """
        self._print_info("üîß ÂÆâË£Ö SAGE Git Hooks...")

        # Check if in Git repo
        if not self._check_git_repo():
            return False

        # Install pre-commit hook
        if not self._install_pre_commit_hook():
            return False

        # Install pre-commit framework
        self._install_pre_commit_framework()

        # Test architecture checker
        self._test_architecture_checker()

        # Print summary
        if not self.quiet:
            self._print_info("")
            self._print_info("=" * 70)
            self._print_success("‚úÖ Git hooks ÂÆâË£ÖÂÆåÊàêÔºÅ")
            self._print_info("")
            self._print_info("‰ª•‰∏ãÂäüËÉΩÂ∑≤ÊøÄÊ¥ª:")
            self._print_info("  ‚Ä¢ ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•: black, isort, ruff, mypyÔºàÈúÄË¶Å pre-commitÔºâ")
            self._print_info("  ‚Ä¢ Dev-notes ÊñáÊ°£ËßÑËåÉÊ£ÄÊü•: ÂàÜÁ±ª„ÄÅÂÖÉÊï∞ÊçÆÁ≠â")
            self._print_info("  ‚Ä¢ Êû∂ÊûÑÂêàËßÑÊÄßÊ£ÄÊü•: ÂåÖ‰æùËµñ„ÄÅÂØºÂÖ•Ë∑ØÂæÑÁ≠â")
            self._print_info("")
            self._print_info("‰ΩøÁî®ÊñπÊ≥ï:")
            self._print_info("  ‚Ä¢ Ê≠£Â∏∏Êèê‰∫§: git commit -m 'message'")
            self._print_info("  ‚Ä¢ Ë∑≥ËøáÊ£ÄÊü•: git commit --no-verify -m 'message'")
            self._print_info("  ‚Ä¢ ÂÆâË£Ö‰ª£Á†ÅÊ£ÄÊü•Â∑•ÂÖ∑: pip install pre-commit")
            self._print_info("")
            self._print_info("Áõ∏ÂÖ≥ÊñáÊ°£:")
            self._print_info("  ‚Ä¢ Êû∂ÊûÑËßÑËåÉ: docs/PACKAGE_ARCHITECTURE.md")
            self._print_info("  ‚Ä¢ ÊñáÊ°£Ê®°Êùø: docs/dev-notes/TEMPLATE.md")
            self._print_info("=" * 70)

        return True

    def uninstall(self) -> bool:
        """
        Uninstall Git hooks.

        Returns:
            True if uninstallation was successful, False otherwise.
        """
        self._print_info("üóëÔ∏è  Âç∏ËΩΩ SAGE Git Hooks...")

        # Check if in Git repo
        if not self._check_git_repo():
            return False

        # Remove pre-commit hook
        pre_commit_hook = self.hooks_dir / "pre-commit"
        if pre_commit_hook.exists():
            pre_commit_hook.unlink()
            self._print_success("‚úÖ pre-commit hook Â∑≤Âà†Èô§")
        else:
            self._print_info("‚ÑπÔ∏è  pre-commit hook ‰∏çÂ≠òÂú®")

        # Uninstall pre-commit framework hooks (optional)
        try:
            subprocess.run(
                ["pre-commit", "uninstall"],
                cwd=str(self.root_dir),
                capture_output=True,
                check=False,
            )
            self._print_success("‚úÖ pre-commit Ê°ÜÊû∂ hooks Â∑≤Âç∏ËΩΩ")
        except FileNotFoundError:
            pass

        self._print_success("‚úÖ Git hooks Âç∏ËΩΩÂÆåÊàêÔºÅ")
        return True

    def status(self) -> dict:
        """
        Check the status of installed hooks.

        Returns:
            Dictionary with hook status information.
        """
        status_info = {
            "git_repo": self._check_git_repo(),
            "pre_commit_hook_installed": False,
            "pre_commit_framework_installed": False,
            "architecture_checker_available": False,
            "devnotes_checker_available": False,
        }

        if not status_info["git_repo"]:
            return status_info

        # Check pre-commit hook
        pre_commit_hook = self.hooks_dir / "pre-commit"
        status_info["pre_commit_hook_installed"] = pre_commit_hook.exists()

        # Check pre-commit framework
        try:
            subprocess.run(
                ["pre-commit", "--version"],
                capture_output=True,
                check=True,
            )
            status_info["pre_commit_framework_installed"] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            status_info["pre_commit_framework_installed"] = False

        # Check architecture checker
        try:
            subprocess.run(
                ["sage-dev", "check-architecture", "--help"],
                capture_output=True,
                check=True,
            )
            status_info["architecture_checker_available"] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            status_info["architecture_checker_available"] = False

        # Check devnotes checker
        try:
            subprocess.run(
                ["sage-dev", "check-devnotes", "--help"],
                capture_output=True,
                check=True,
            )
            status_info["devnotes_checker_available"] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            status_info["devnotes_checker_available"] = False

        return status_info

    def print_status(self) -> None:
        """Print the status of installed hooks in a human-readable format."""
        status = self.status()

        print("\n" + "=" * 70)
        print("üìä SAGE Git Hooks Áä∂ÊÄÅ")
        print("=" * 70)

        # Git repo status
        if status["git_repo"]:
            print(f"{self.GREEN}‚úÖ Git ‰ªìÂ∫ì: ÊòØ{self.NC}")
        else:
            print(f"{self.RED}‚ùå Git ‰ªìÂ∫ì: Âê¶{self.NC}")
            print("\n" + "=" * 70)
            return

        # Pre-commit hook
        if status["pre_commit_hook_installed"]:
            print(f"{self.GREEN}‚úÖ Pre-commit Hook: Â∑≤ÂÆâË£Ö{self.NC}")
        else:
            print(f"{self.YELLOW}‚ö†Ô∏è  Pre-commit Hook: Êú™ÂÆâË£Ö{self.NC}")

        # Pre-commit framework
        if status["pre_commit_framework_installed"]:
            print(f"{self.GREEN}‚úÖ Pre-commit Ê°ÜÊû∂: Â∑≤ÂÆâË£Ö{self.NC}")
        else:
            print(f"{self.YELLOW}‚ö†Ô∏è  Pre-commit Ê°ÜÊû∂: Êú™ÂÆâË£Ö{self.NC}")
            print(f"   {self.BLUE}ÂÆâË£Ö: pip install pre-commit{self.NC}")

        # Architecture checker
        if status["architecture_checker_available"]:
            print(f"{self.GREEN}‚úÖ Architecture Checker: ÂèØÁî®{self.NC}")
        else:
            print(f"{self.YELLOW}‚ö†Ô∏è  Architecture Checker: ‰∏çÂèØÁî®{self.NC}")
            print(f"   {self.BLUE}ÂÆâË£Ö: pip install -e packages/sage-tools{self.NC}")

        # Devnotes checker
        if status["devnotes_checker_available"]:
            print(f"{self.GREEN}‚úÖ DevNotes Checker: ÂèØÁî®{self.NC}")
        else:
            print(f"{self.YELLOW}‚ö†Ô∏è  DevNotes Checker: ‰∏çÂèØÁî®{self.NC}")
            print(f"   {self.BLUE}ÂÆâË£Ö: pip install -e packages/sage-tools{self.NC}")

        print("\n" + "=" * 70)

        # Recommendations
        if not all(
            [
                status["pre_commit_hook_installed"],
                status["pre_commit_framework_installed"],
                status["architecture_checker_available"],
            ]
        ):
            print("\nüí° Âª∫ËÆÆ:")
            if not status["pre_commit_hook_installed"]:
                print(
                    f"   {self.BLUE}‚Ä¢ ËøêË°å 'sage-dev maintain hooks install' ÂÆâË£Ö Git hooks{self.NC}"
                )
            if not status["pre_commit_framework_installed"]:
                print(
                    f"   {self.BLUE}‚Ä¢ ËøêË°å 'pip install pre-commit' ÂÆâË£Ö‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•Â∑•ÂÖ∑{self.NC}"
                )
            print("")
