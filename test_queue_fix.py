#!/usr/bin/env python3
"""
ÁÆÄÂçïÁöÑÈòüÂàóÁ≥ªÁªüÊµãËØïÂíå‰øÆÂ§çÈ™åËØÅ
"""

import sys
import os
import time

# Ê∑ªÂä† SAGE Âà∞Ë∑ØÂæÑ
SAGE_ROOT = '/home/shuhao/SAGE'
if SAGE_ROOT not in sys.path:
    sys.path.insert(0, SAGE_ROOT)

def test_queue_adapter():
    """ÊµãËØïÈòüÂàóÈÄÇÈÖçÂô®"""
    print("üîß Testing Queue Adapter...")
    
    try:
        from sage.utils.queue_adapter import create_queue, get_recommended_queue_backend
        
        # ÊµãËØïÂêéÁ´ØÊé®Ëçê
        recommended = get_recommended_queue_backend()
        print(f"   Recommended backend: {recommended}")
        
        # ÊµãËØïÈòüÂàóÂàõÂª∫
        queue = create_queue(name='test_simple')
        print(f"   Created queue: {type(queue)}")
        
        # ÊµãËØïÂü∫Á°ÄÊìç‰Ωú
        test_data = "hello_world"
        queue.put(test_data)
        result = queue.get()
        
        if result == test_data:
            print("   ‚úÖ Queue operations working")
            return True
        else:
            print(f"   ‚ùå Queue test failed: expected {test_data}, got {result}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Queue adapter error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_backend_fallback():
    """ÊµãËØïÂêéÁ´ØÂõûÈÄÄÊú∫Âà∂"""
    print("üîÑ Testing Backend Fallback...")
    
    try:
        from sage.utils.queue_adapter import create_queue
        
        # ÊµãËØï‰∏çÂêåÂêéÁ´Ø
        backends_to_test = ['auto', 'ray_queue', 'python_queue']
        working_backends = []
        
        for backend in backends_to_test:
            try:
                queue = create_queue(backend=backend, name=f'test_{backend}')
                queue.put("test")
                result = queue.get()
                if result == "test":
                    working_backends.append(backend)
                    print(f"   ‚úÖ Backend {backend} working")
                else:
                    print(f"   ‚ùå Backend {backend} failed test")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Backend {backend} error: {e}")
        
        print(f"   Working backends: {working_backends}")
        return len(working_backends) > 0
        
    except Exception as e:
        print(f"   ‚ùå Fallback test error: {e}")
        return False

def test_distributed_detection():
    """ÊµãËØïÂàÜÂ∏ÉÂºèÁéØÂ¢ÉÊ£ÄÊµã"""
    print("üåê Testing Distributed Environment Detection...")
    
    try:
        # Ê£ÄÊü• Ray ÊòØÂê¶ÂèØÁî®
        try:
            import ray
            ray_available = True
            ray_initialized = ray.is_initialized()
            print(f"   Ray available: {ray_available}")
            print(f"   Ray initialized: {ray_initialized}")
        except ImportError:
            ray_available = False
            ray_initialized = False
            print("   Ray not available")
        
        # ÊµãËØïÈòüÂàóÈÄÇÈÖçÂô®ÁöÑÂàÜÂ∏ÉÂºèÊ£ÄÊµã
        from sage.utils.queue_adapter import get_recommended_queue_backend
        recommended = get_recommended_queue_backend()
        print(f"   Recommended for current environment: {recommended}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Distributed detection error: {e}")
        return False

def test_router_fix():
    """ÊµãËØïË∑ØÁî±Âô®‰øÆÂ§çÊòØÂê¶ÊúâÊïà"""
    print("üîó Testing Router Connection Fix...")
    
    try:
        # Ê®°ÊãüË∑ØÁî±Âô®ËøûÊé•ÊµãËØï
        from sage.utils.queue_adapter import create_queue
        
        # ÂàõÂª∫Ê®°ÊãüÁöÑ input_bufferÔºàÂ∞±ÂÉè BaseTask ÂÅöÁöÑÈÇ£Ê†∑Ôºâ
        input_buffer = create_queue(name='test_input_buffer')
        
        # Ê®°ÊãüËøûÊé•Âª∫Á´ãÔºà‰πãÂâçÁöÑÈîôËØØÊñπÂºè‰ºöÂàõÂª∫Êñ∞ÈòüÂàóÔºâ
        # Áé∞Âú®Â∫îËØ•Áõ¥Êé•‰ΩøÁî® input_buffer
        target_buffer = input_buffer  # Ê≠£Á°ÆÊñπÂºèÔºöÁõ¥Êé•‰ΩøÁî®Áé∞ÊúâÈòüÂàó
        
        # ÊµãËØïÊï∞ÊçÆ‰º†ÈÄí
        test_packet = {"type": "test", "data": "router_test"}
        target_buffer.put(test_packet)
        received = target_buffer.get()
        
        if received == test_packet:
            print("   ‚úÖ Router connection simulation working")
            return True
        else:
            print(f"   ‚ùå Router test failed: {received}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Router test error: {e}")
        return False

def main():
    """‰∏ªÊµãËØïÂáΩÊï∞"""
    print("üöÄ SAGE Queue System Fix Verification")
    print("=" * 50)
    
    tests = [
        ("Queue Adapter", test_queue_adapter),
        ("Backend Fallback", test_backend_fallback), 
        ("Distributed Detection", test_distributed_detection),
        ("Router Fix", test_router_fix)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"   üí• Test crashed: {e}")
            results[test_name] = False
    
    # ÊÄªÁªì
    print(f"\n" + "=" * 50)
    print("üìä Test Results Summary:")
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   ‚Ä¢ {test_name}: {status}")
    
    print(f"\nOverall: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Queue system fix is working correctly.")
        return 0
    elif passed > 0:
        print("‚ö†Ô∏è  Some tests passed. Queue system partially working.")
        return 1
    else:
        print("‚ùå All tests failed. Queue system needs more work.")
        return 2

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
