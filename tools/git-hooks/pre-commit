#!/bin/bash
#
# Git Pre-commit Hook for SAGE
#
# 自动运行：
# 1. 代码质量检查（black, isort, ruff 等）- 使用 pre-commit 框架
# 2. 架构合规性检查（自定义）
#
# 安装方法: 运行 ./quickstart.sh 或 ./tools/git-hooks/install.sh
#

set -e

# 获取项目根目录
ROOT_DIR="$(git rev-parse --show-toplevel)"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 运行 SAGE Pre-commit 检查...${NC}"
echo ""

# ============================================================================
# 1. 运行 pre-commit 框架（代码质量检查）
# ============================================================================

if command -v pre-commit >/dev/null 2>&1 && [ -f "$ROOT_DIR/.pre-commit-config.yaml" ]; then
    echo -e "${BLUE}📋 步骤 1/2: 代码质量检查（black, isort, ruff 等）${NC}"
    
    if pre-commit run --from-ref HEAD --to-ref HEAD 2>&1 | grep -v "^$"; then
        echo -e "${GREEN}✅ 代码质量检查通过${NC}"
    else
        # pre-commit 可能会自动修复一些问题
        echo -e "${YELLOW}⚠️  代码已自动格式化，请查看变更并重新添加${NC}"
        echo -e "${YELLOW}   运行: git add . && git commit${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}ℹ️  pre-commit 未安装，跳过代码质量检查${NC}"
    echo -e "${YELLOW}   安装: pip install pre-commit && pre-commit install${NC}"
fi

echo ""

# ============================================================================
# 2. 运行架构合规性检查（自定义）
# ============================================================================

echo -e "${BLUE}🏗️  步骤 2/2: 架构合规性检查${NC}"

# 检查 architecture_checker.py 是否存在
if [ ! -f "$ROOT_DIR/tools/architecture_checker.py" ]; then
    echo -e "${YELLOW}⚠️  警告: 找不到 architecture_checker.py，跳过架构检查${NC}"
    exit 0
fi

# 获取暂存的 Python 文件
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}ℹ️  没有 Python 文件变更，跳过架构检查${NC}"
    exit 0
fi

echo -e "📝 检查 $(echo "$STAGED_FILES" | wc -l) 个暂存的 Python 文件"

# 运行架构检查（仅检查变更文件）
if python3 "$ROOT_DIR/tools/architecture_checker.py" \
    --root "$ROOT_DIR" \
    --changed-only \
    --diff HEAD 2>&1 | tail -20; then
    echo -e "${GREEN}✅ 架构合规性检查通过${NC}"
    echo ""
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✅ 所有检查通过！可以提交${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}❌ 架构合规性检查失败！${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo "请修复上述问题后再提交。"
    echo ""
    echo "💡 提示:"
    echo "  • 查看架构规范: docs/PACKAGE_ARCHITECTURE.md"
    echo "  • 强制提交（不推荐）: git commit --no-verify"
    echo ""
    exit 1
fi
